<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SSM框架</title>
    <url>/2022/10/15/SSM/</url>
    <content><![CDATA[<h1 id="SSM"><a href="#SSM" class="headerlink" title="SSM*"></a><em>SSM</em>*</h1><h1 id="一、Spring"><a href="#一、Spring" class="headerlink" title="一、Spring"></a>一、Spring</h1><p><img src="/2022/10/15/SSM/1662043785756.png" alt="1662043785756"></p>
<p><img src="/2022/10/15/SSM/1662043961142.png" alt="1662043961142"></p>
<p><img src="/2022/10/15/SSM/1662044011475.png" alt="1662044011475"></p>
<p><img src="/2022/10/15/SSM/1662044544526.png" alt="1662044544526"></p>
<p>通过断点调试可知 ：</p>
<p>singleton 在加载配置文件时候创建bean对象</p>
<p>prototype 在调用getbean方法时创建bean对象</p>
<p><img src="/2022/10/15/SSM/1662044915540.png" alt="1662044915540"></p>
<p><img src="/2022/10/15/SSM/1662045148297.png" alt="1662045148297"></p>
<p><img src="/2022/10/15/SSM/1662045402357.png" alt="1662045402357"></p>
<p>默认使用无参构造    </p>
<p>工厂静态方法实例化：</p>
<p>首先创造工厂类 创建静态方法  通过 factory-method找方法</p>
<p><img src="/2022/10/15/SSM/1662045487394.png" alt="1662045487394"></p>
<p>工厂实例方法实例化： </p>
<p><img src="/2022/10/15/SSM/1662045527267.png" alt="1662045527267"></p>
<p><img src="/2022/10/15/SSM/1662384935193.png" alt="1662384935193"></p>
<p><img src="/2022/10/15/SSM/1662385094131.png" alt="1662385094131"></p>
<p><img src="/2022/10/15/SSM/1662385509745.png" alt="1662385509745"></p>
<p><img src="/2022/10/15/SSM/1662386348344.png" alt="1662386348344"></p>
<p>1、普通</p>
<p><img src="/2022/10/15/SSM/1662386371571.png" alt="1662386371571"></p>
<p>2、List  和 map  和 集合</p>
<p><img src="/2022/10/15/SSM/1662386422152.png" alt="1662386422152"></p>
<p><img src="/2022/10/15/SSM/1662386457742.png" alt="1662386457742"></p>
<p><img src="/2022/10/15/SSM/1662386476236.png" alt="1662386476236"></p>
<p><img src="/2022/10/15/SSM/1662477200253.png" alt="1662477200253"></p>
<p><img src="/2022/10/15/SSM/1662477819175.png" alt="1662477819175"></p>
<p><img src="/2022/10/15/SSM/1662478050848.png" alt="1662478050848"></p>
<p><img src="/2022/10/15/SSM/1662478175739.png" alt="1662478175739"></p>
<p><img src="/2022/10/15/SSM/1662648342666.png" alt="1662648342666"></p>
<p><img src="/2022/10/15/SSM/1662648232341.png" alt="1662648232341"></p>
<p><img src="/2022/10/15/SSM/1662648263414.png" alt="1662648263414"></p>
<p><img src="/2022/10/15/SSM/1662648558467.png" alt="1662648558467"></p>
<p><img src="/2022/10/15/SSM/1662649661829.png" alt="1662649661829"></p>
<p>注解开发需要配合组件扫描一起使用</p>
<p><img src="/2022/10/15/SSM/1662650326083.png" alt="1662650326083"></p>
<p>@Autowired </p>
<p>@Qualifier（“userDao”） 只要一个bean的时候 可以省略此行</p>
<p>@Resource(name&#x3D;”userDao”) 相当于上面两个的合体</p>
<p><img src="/2022/10/15/SSM/1662701327851.png" alt="1662701327851"></p>
<p><img src="/2022/10/15/SSM/1662701345192.png" alt="1662701345192"></p>
<p><img src="/2022/10/15/SSM/1662702447904.png" alt="1662702447904"></p>
<p><img src="/2022/10/15/SSM/1662714749735.png" alt="1662714749735"></p>
<p><img src="/2022/10/15/SSM/1662717380877.png" alt="1662717380877"></p>
<h1 id="二、Spring-MVC"><a href="#二、Spring-MVC" class="headerlink" title="二、Spring MVC"></a>二、Spring MVC</h1><p><img src="/2022/10/15/SSM/1662878953754.png" alt="1662878953754"></p>
<p><img src="/2022/10/15/SSM/1662879336934.png" alt="1662879336934"></p>
<p><img src="/2022/10/15/SSM/1662957276484.png" alt="1662957276484"></p>
<p><img src="/2022/10/15/SSM/1662957372404.png" alt="1662957372404"></p>
<p><img src="/2022/10/15/SSM/1662959866461.png" alt="1662959866461"></p>
<p><img src="/2022/10/15/SSM/1662960148851.png" alt="1662960148851"></p>
<p><img src="/2022/10/15/SSM/1662961022027.png" alt="1662961022027"></p>
<p><img src="/2022/10/15/SSM/1662961261610.png" alt="1662961261610"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    配置内部资源视图解析器--&gt;    </span><br><span class="line">&lt;bean id=<span class="string">&quot;viewResolver&quot;</span>        class=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;        &lt;property name=<span class="string">&quot;prefix&quot;</span> value=<span class="string">&quot;/jsp/&quot;</span>&gt;&lt;/property&gt;       </span><br><span class="line"> &lt;property name=<span class="string">&quot;suffix&quot;</span> value=<span class="string">&quot;.jsp&quot;</span>&gt;&lt;/property&gt;   </span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2022/10/15/SSM/1662970766275.png" alt="1662970766275"></p>
<p>ModelAndView 也可以单独model  和 view  </p>
<p>也可以 public ModelAndView save3(ModelAndView modelAndView)</p>
<p>springMVC框架会帮我们创建对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/quick2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">save2</span><span class="params">()</span>&#123;   </span><br><span class="line">    ModelAndView modelAndView=<span class="keyword">new</span> <span class="title class_">ModelAndView</span>();    </span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;itheima&quot;</span>);   </span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;success&quot;</span>);    </span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2022/10/15/SSM/1663310887312.png" alt="1663310887312"></p>
<p>controller直接返回对象 通过配置文件自动转换为json格式</p>
<p>springmvx配置文件如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean class=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span>&gt;    &lt;property name=<span class="string">&quot;messageConverters&quot;</span>&gt;</span><br><span class="line">     &lt;list&gt;</span><br><span class="line">       &lt;bean  class=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>/&gt;        &lt;/list&gt;   </span><br><span class="line"> &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>。。。。。。经典白学</p>
<p>通过mvc注解驱动会自动完成</p>
<p><img src="/2022/10/15/SSM/1663418173865.png" alt="1663418173865"></p>
<p>获取请求参数</p>
<p> <img src="/2022/10/15/SSM/1663420437246.png" alt="1663420437246"></p>
<p><img src="/2022/10/15/SSM/1663511474539.png" alt="1663511474539"></p>
<p>获取集合类型参数 ，要将集合参数包装到一个pojo中才可以</p>
<p><img src="/2022/10/15/SSM/1663512331171.png" alt="1663512331171"></p>
<p><img src="/2022/10/15/SSM/1663513013433.png" alt="1663513013433"></p>
<p><img src="/2022/10/15/SSM/1663513458180.png" alt="1663513458180"></p>
<p>default-servlet-handler 让tomcat服务器帮我们去找静态资源</p>
<p><img src="/2022/10/15/SSM/1663513549987.png" alt="1663513549987"></p>
<p>解决中文乱码问题</p>
<p>RequestParam(“name”)   将name 映射到username中</p>
<p><img src="/2022/10/15/SSM/1663514243897.png" alt="1663514243897"></p>
<p><img src="/2022/10/15/SSM/1663514270968.png" alt="1663514270968"></p>
<p><img src="/2022/10/15/SSM/1663514456360.png" alt="1663514456360"></p>
<p><img src="/2022/10/15/SSM/1663514635446.png" alt="1663514635446"></p>
<p><img src="/2022/10/15/SSM/1663515436171.png" alt="1663515436171"></p>
<p><img src="/2022/10/15/SSM/1663515543762.png" alt="1663515543762"></p>
<p><img src="/2022/10/15/SSM/1663516107982.png" alt="1663516107982"></p>
<p><img src="/2022/10/15/SSM/1663516131562.png" alt="1663516131562"></p>
<p>文件上传</p>
<p>先导入依赖坐标</p>
<p><img src="/2022/10/15/SSM/1663769181971.png" alt="1663769181971"></p>
<p><img src="/2022/10/15/SSM/1663769103866.png" alt="1663769103866"></p>
<p><img src="/2022/10/15/SSM/1663769092709.png" alt="1663769092709"></p>
<p><img src="/2022/10/15/SSM/1663769132047.png" alt="1663769132047"></p>
<p><img src="/2022/10/15/SSM/1663769249533.png" alt="1663769249533"></p>
<h2 id="jdbcTemplate基本使用"><a href="#jdbcTemplate基本使用" class="headerlink" title="jdbcTemplate基本使用"></a>jdbcTemplate基本使用</h2><p><img src="/2022/10/15/SSM/1663769466895.png" alt="1663769466895"></p>
<p><img src="/2022/10/15/SSM/1663769480944.png" alt="1663769480944"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ComboPooledDataSource dataSource=<span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql:///db1&quot;</span>);</span><br><span class="line">dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">dataSource.setPassword(<span class="string">&quot;1234&quot;</span>);</span><br><span class="line">JdbcTemplate jdbcTemplate=<span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line"><span class="comment">//设置数据源对象，知道数据库的位置</span></span><br><span class="line">jdbcTemplate.setDataSource(dataSource);</span><br><span class="line"><span class="comment">//执行操作</span></span><br><span class="line"><span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> jdbcTemplate.update(<span class="string">&quot;insert into account values (?,?)&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="number">5000</span>);</span><br><span class="line">System.out.println(row);</span><br></pre></td></tr></table></figure>

<p><img src="/2022/10/15/SSM/1663772245814.png" alt="1663772245814"></p>
<p><img src="/2022/10/15/SSM/1663773697656.png" alt="1663773697656"></p>
<h2 id="sping-mvc拦截器"><a href="#sping-mvc拦截器" class="headerlink" title="sping-mvc拦截器"></a>sping-mvc拦截器</h2><p><img src="/2022/10/15/SSM/1664202484692.png" alt="1664202484692"></p>
<p><img src="/2022/10/15/SSM/1664203319954.png" alt="1664203319954"></p>
<p><img src="/2022/10/15/SSM/1664205285583.png" alt="1664205285583"></p>
<p><img src="/2022/10/15/SSM/1664205334292.png" alt="1664205334292"></p>
<h2 id="spring异常处理机制"><a href="#spring异常处理机制" class="headerlink" title="spring异常处理机制"></a>spring异常处理机制</h2><p><img src="/2022/10/15/SSM/1664208176765.png" alt="1664208176765"></p>
<p><img src="/2022/10/15/SSM/1664208358860.png" alt="1664208358860"></p>
<p><img src="/2022/10/15/SSM/1664208888937.png" alt="1664208888937"></p>
<h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><p><img src="/2022/10/15/SSM/1664292304509.png" alt="1664292304509"></p>
<p><img src="/2022/10/15/SSM/1664292618933.png" alt="1664292618933"></p>
<p><img src="/2022/10/15/SSM/1664292839278.png" alt="1664292839278"></p>
<p><img src="/2022/10/15/SSM/1664294434716.png" alt="1664294434716"></p>
<p><img src="/2022/10/15/SSM/1664895616889.png" alt="1664895616889"></p>
<p><img src="/2022/10/15/SSM/1664895664946.png" alt="1664895664946"></p>
<p><img src="/2022/10/15/SSM/1664897057817.png" alt="1664897057817"></p>
<p><img src="/2022/10/15/SSM/1664897691446.png" alt="1664897691446"></p>
<p><img src="/2022/10/15/SSM/1664897705001.png" alt="1664897705001"></p>
<p>切点表达式的抽取：</p>
<p><img src="/2022/10/15/SSM/1664897828575.png" alt="1664897828575"></p>
<p><img src="/2022/10/15/SSM/1664897834613.png" alt="1664897834613"></p>
<p><img src="/2022/10/15/SSM/1664897893168.png" alt="1664897893168"></p>
<p>基于注解的aop开发</p>
<p><img src="/2022/10/15/SSM/1664981930027.png" alt="1664981930027"></p>
<p><img src="/2022/10/15/SSM/1664981940202.png" alt="1664981940202"></p>
<p><img src="/2022/10/15/SSM/1664982009440.png" alt="1664982009440"></p>
<p><img src="/2022/10/15/SSM/1664982190198.png" alt="1664982190198"></p>
<p><img src="/2022/10/15/SSM/1665031965634.png" alt="1665031965634"></p>
<p><img src="/2022/10/15/SSM/1665031267456.png" alt="1665031267456"></p>
<p><img src="/2022/10/15/SSM/1665031696303.png" alt="1665031696303"></p>
<p><img src="/2022/10/15/SSM/1665031934615.png" alt="1665031934615"></p>
<p><img src="/2022/10/15/SSM/1665032207110.png" alt="1665032207110"></p>
<p><img src="/2022/10/15/SSM/1665033375690.png" alt="1665033375690"></p>
<p>使用注解</p>
<p><img src="/2022/10/15/SSM/1665033780738.png" alt="1665033780738"></p>
<p><img src="/2022/10/15/SSM/1665033799554.png" alt="1665033799554"></p>
<h1 id="三、Mybatis"><a href="#三、Mybatis" class="headerlink" title="三、Mybatis"></a>三、Mybatis</h1><p><img src="/2022/10/15/SSM/1665066378231.png" alt="1665066378231"></p>
<p><img src="/2022/10/15/SSM/1665066545753.png" alt="1665066545753"></p>
<p><img src="/2022/10/15/SSM/1665066993704.png" alt="1665066993704"></p>
<p><img src="/2022/10/15/SSM/1665067162200.png" alt="1665067162200"></p>
<p><img src="/2022/10/15/SSM/1665068443531.png" alt="1665068443531"></p>
<p><img src="/2022/10/15/SSM/1665115892320.png" alt="1665115892320"></p>
<p><img src="/2022/10/15/SSM/1665116172179.png" alt="1665116172179"></p>
<p><img src="/2022/10/15/SSM/1665116277158.png" alt="1665116277158"></p>
<p><img src="/2022/10/15/SSM/1665116318422.png" alt="1665116318422"></p>
<p><img src="/2022/10/15/SSM/1665116367806.png" alt="1665116367806"></p>
<p>sqlmapconfig核心配置文件需要安顺序</p>
<p><img src="/2022/10/15/SSM/1665116552422.png" alt="1665116552422"></p>
<p><img src="/2022/10/15/SSM/1665117472154.png" alt="1665117472154"></p>
<p><img src="/2022/10/15/SSM/1665121525951.png" alt="1665121525951"></p>
<p>通过反射 代理</p>
<p><img src="/2022/10/15/SSM/1665121635168.png" alt="1665121635168"></p>
<p>动态sql的标签应用</p>
<p><img src="/2022/10/15/SSM/1665122854313.png" alt="1665122854313"></p>
<p><img src="/2022/10/15/SSM/1665122779316.png" alt="1665122779316"></p>
<p>sql语句的抽取</p>
<p><img src="/2022/10/15/SSM/1665122956696.png" alt="1665122956696"></p>
<p><img src="/2022/10/15/SSM/1665123033380.png" alt="1665123033380"></p>
<p>自定义类型转化器 用于数据库类型和java类型的项目转换</p>
<p><img src="/2022/10/15/SSM/1665154962243.png" alt="1665154962243"></p>
<p>利用插件完成分页</p>
<p><img src="/2022/10/15/SSM/1665155200078.png" alt="1665155200078"></p>
<p><img src="/2022/10/15/SSM/1665155222475.png" alt="1665155222475"></p>
<p><img src="/2022/10/15/SSM/1665155580987.png" alt="1665155580987"></p>
<p><img src="/2022/10/15/SSM/1665155608406.png" alt="1665155608406"></p>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>java 的domain 要使用面向对象封装</p>
<p><img src="/2022/10/15/SSM/1665156346205.png" alt="1665156346205"></p>
<p>使用resultmap手动指定映射关系</p>
<p><img src="/2022/10/15/SSM/1665156362662.png" alt="1665156362662"></p>
<p>规范优化</p>
<p><img src="/2022/10/15/SSM/1665156554906.png" alt="1665156554906"></p>
<p>一对多 collection</p>
<p><img src="/2022/10/15/SSM/1665156909239.png" alt="1665156909239"></p>
<p><img src="/2022/10/15/SSM/1665157309893.png" alt="1665157309893"></p>
<p>注解开发</p>
<p><img src="/2022/10/15/SSM/1665241197809.png" alt="1665241197809"></p>
<p>需要包扫描</p>
<p>注解配置映射关系</p>
<p><img src="/2022/10/15/SSM/1665241954548.png" alt="1665241954548"></p>
<p>另外一种方法</p>
<p><img src="/2022/10/15/SSM/1665242249691.png" alt="1665242249691"></p>
<p><img src="/2022/10/15/SSM/1665243077025.png" alt="1665243077025"></p>
]]></content>
      <categories>
        <category>JAVA后端</category>
      </categories>
      <tags>
        <tag>JAVA后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA</title>
    <url>/2022/04/15/hello-world/</url>
    <content><![CDATA[<p>Arrays 数组</p>
<p>基本类型包装类</p>
<p>Integer </p>
<p>Split 把string中的数据取出到int数组中、<br>stringbuilder（）元素拼接成字符串</p>
<p>simpledataformat<br>format parse</p>
<p>字符串拼接<br>StringBuilder sb&#x3D;new StringBuilder();<br>sb.append(xxx).append(“(“).append(xxx).append(“)”);<br>String s &#x3D; sb.toString();<br>System.out.println(s);</p>
<p>集合操作<br>Collections.sort(list);排序<br>Collections.reverse(list);反序<br>Collections.shuffle(list);随即置换</p>
<p>文件操作<br>File  f1&#x3D;new File(“路径”);<br>fl.createNewFile(); 创建文件<br>f1.mkdir()创建文件夹(目录)；<br>f1.mkdirs();多级目录<br>不能出现名字一样即使是不同 文件或者文件夹<br>f1.isDirectory()是否为目录<br>f1.isFile()是否为文件<br>f1.exists()是否存在</p>
<p>f1.getAbsolutePath();绝对路径<br>f1,getPath();路径<br>f1.getName();名称</p>
<p>f1.list()得到的是字符串数组  遍历目录下的文件<br>f1.listFiles()绝对路径的 字符串数组、</p>
<p>要先删除内容 才能删除文件夹</p>
<p>io输入流<br>字节流  记事本打开乱码的用 万能<br>字符流  记事本打开看得懂的</p>
<p>fileOutputStream  fos &#x3D;new FileOutputStream(“路径”,true)文件输出流 true追加写入</p>
<p>fos.write(String.getBytes());<br>文件换行  fos.write(“\r\n”.getBytes());</p>
<p>try{<br>}catch{<br>}finally {<br>    执行所有释放资源的代码<br>}</p>
<p>字节缓冲输出流：BufferedOutputStream(new OutPutStream)<br>字节缓冲输入流：BufferedInputStream();、<br>效率快</p>
<p>字符流  识别中文<br>编码 汉字存储都是负数<br>GBK  一个汉字两个字节<br>UTF-8  一个汉字三个字节</p>
<p>字符缓冲流<br>输入流：BufferedReader br&#x3D;new BufferedReader(new FileReader(“”));<br>输出流：Reader&#x3D;Write;<br>newLine() 换行  不同系统都能换行 通用<br>readLine() 读取一行<br>flush 刷新<br>特有功能</p>
<p>InputStreamReader 转换流 字节流转化成字符流<br>标准输入流<br>BufferedReader br &#x3D; new BufferedReader(enw InputStreamReader(System.in))</p>
<p>对象序列化<br>反序列化  都要 implements接口<br>给对象加一个变量serialVersionUID 可保证修改类 仍然可以识别<br>transient 修饰变量可以不被序列化</p>
<p> Map体系集合类 Properties 可以在io流中使用 Properties 不能写泛形<br> 特有功能 prop.setProperty(String,String);添加到集合 底层 hashtable中的put方法<br>          prop.getProperty(String key) 根据键搜索属性<br>          Set<String> stringPropertyNames() 返回键集合，且不可修改<br>void load(Reader reader)  读取属性列表<br>void store(Writer writer,String comments)把属性列表写入输出字符流	  </String></p>
<pre><code>      启动线程start();
</code></pre>
<p>   .getPriority() 获取线程优先级<br>   .setPriority();<br>   max——priority10  min 1 默认值5；<br>   优先级高 几率高 并不是一直在前面<br>线程控制：<br>    sleep() 线程休眠时间；<br>    join() 等待线程死亡，才执行后面的<br>    设置守护线程， setDaemon（true） 主线程执行完毕后，守护线程也要消失</p>
<p>实现方法 1、创建一个类继承 Thread 重写其中的run();<br>         2、创建类实现Runnable接口  重写run()方法：  创建Thread 构造中接入类对象</p>
<p>同步代码块：解决数据共享数据安全问题<br>synchronized（任意对象即锁对象）{<br>    多条语句操作的代码<br>}<br>同步方法 加到方法上 private synchronized void ….. 同步方法锁对象 是this<br>同步静态方法private static synchronized void …..  同步静态方法锁对象 java类名.class</p>
<p>线程安全类 加的有synchronized<br>StringBuffer</p>
<p>Vector           Collections.synchronized<br>Hashtable 被替代 Collections.synchronized</p>
<p>Lock锁<br>Lock是接口 调用实例化对象 ReentrantLock<br>.lock（）加锁<br>unlock（）释放锁</p>
<p>生产者消费者模式<br>生产者 仓库 消费者<br>wait() 当前线程等待，知道被唤醒<br>notify() 唤醒正在等待对象监视的单个线程、<br>notifyAll() 唤醒正在等待对象监视的所有线程</p>
<p>——-网络编程<br>三要素： IP地址  端口（设备应用程序的唯一标识0-65535  0-1023 一些知名网络一般用1024以上 ）   协议（遵守一定的规则）UDP TCP<br>  cmd控制窗口 ：ipconfig 查看本机IP地址   ping ip地址 检查网络是否连通、<br>  10.219.81.31<br> Udp： 创建发送端Socket对象 创建数据包 打包 发送 关闭<br>       创建接收端Socket对象 接受收据包 解析 关闭</p>
<p>Lambda表达式<br>（形式参数）-&gt;{代码块}<br> 使用lambda 必须要有接口，并且接口中有且只有一个抽象方法<br> 匿名内部类编译后会产生一个单独的字节码文件 Lambda 不会</p>
<p> 接口中默认方法 public default 不强制重写此方法 public 可以省略，实现接口的升级  也可以重写<br> 接口中静态方法 public static  静态方法只能被接口名调用 public可以省略<br> 接口中私有方法 private or private static 私有方法只能被默认方法中调用<br> 私有静态可以被静态方法调用 也可以被 默认方法调用 </p>
<p> 方法引用符   ：：</p>
<p> 引用类方法–静态方法<br> 引用对象的实例方法–引用类的成员方法<br> 引用类的实例方法–引用类的成员方法 （s,x,y-&gt;s.substring(x,y）可以是 (string::substring(x,y)) 多个参数时，第一个为调用者 后面为参数<br> 引用构造器–引用构造方法</p>
<p> 函数式接口<br>有且只有一个抽象方法的接口<br>函数式接口注解 @FunctionalInterface<br>Supplier<T>接口 get（）获得数据<br>Consumer<T>接口 accept（T t）  con1.andThen (con2).accept(name);<br>Predicate<T>接口 返回boolean test（）；negate（）！逻辑非；and（Predicatere） 与&amp;&amp; ; or(Predicate) 或 or；<br>Function&lt;T,R&gt;接口 apply()字符串转换     andThen </T></T></T></p>
<p>Stream流<br>生成流 中间操作 终结操作<br>中间操作：<br>集合过滤操作 filter(lambda表达式)    limit()输出几个 skip()跳过几个 count()统计<br>concat(Stream a,Stream b)合并两个流； distinct()删除重复元素  sorted()自然排序  sorted(Comparator com1 )<br>mapToint(lambda) 有一个sum()很好用<br>终结操作：<br>forEach(lambda)输出流 收集流中数据 collect(Collectors.toList());</p>
<p>反射<br>获取的三种方法<br>1.使用类的.class属性<br>2.调用对象的.getClass()方法<br>3.class类中的静态方法.forName(“路径”)灵活性高<br>获取构造函数：<br>getConstructors() 返回公共的构造方法数组<br>getDeclaredConstructors()返回公共和私有的构造方法数组<br>getConstructor() 返回单个 得到一个无参构造 .newInstance()创建对象<br>getDeclaredConstructor() 返回单个构造方法对象<br>暴力反射：setAccessible(boolean flag) 值为true,取消访问检查 即可用私有构造方法<br>getConstructor(T.class)<br>获取成员变量：<br>getFields()<br>getDeclaredFields()<br>getField()<br>getDeclaredField()</p>
<p>成员变量.set(对象，””);给成员变量赋值<br>私有的成员变量也要暴力使用</p>
<p>获取成员方法：<br>getMethods() 还获取继承父类的<br>getDeclaredMethods()<br>getMethod()<br>getDeclaredMethod() </p>
<p>成员方法.invoke(obj,””)</p>
<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><h2 id="src新建module-info-java-的描述性文件"><a href="#src新建module-info-java-的描述性文件" class="headerlink" title="src新建module-info.java 的描述性文件"></a>src新建module-info.java 的描述性文件</h2><h2 id="exports-包名"><a href="#exports-包名" class="headerlink" title="exports 包名"></a>exports 包名</h2><h2 id="requires-模块名"><a href="#requires-模块名" class="headerlink" title="requires 模块名"></a>requires 模块名</h2>]]></content>
      <categories>
        <category>JAVA后端</category>
      </categories>
      <tags>
        <tag>JAVA后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2022/11/25/git/</url>
    <content><![CDATA[<h1 id="git课程"><a href="#git课程" class="headerlink" title="git课程"></a>git课程</h1><p><img src="/2022/11/25/git/1669126405128.png" alt="1669126405128"></p>
<p><img src="/2022/11/25/git/1669126620512.png" alt="1669126620512"></p>
<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><p><img src="/2022/11/25/git/1669128574364.png" alt="1669128574364"></p>
<p>git init 本地创建仓库</p>
<p>git clone 克隆远程仓库地址</p>
<p><img src="/2022/11/25/git/1669128847700.png" alt="1669128847700"></p>
<p><img src="/2022/11/25/git/1669129052690.png" alt="1669129052690"></p>
<p> <img src="/2022/11/25/git/1669129227574.png" alt="1669129227574"></p>
<p><img src="/2022/11/25/git/1669129742960.png" alt="1669129742960"></p>
<p>getlog查看日志 ， git reset –hard （版本号） </p>
<p><img src="/2022/11/25/git/1669129800903.png" alt="1669129800903"></p>
<p>git remote -v 详细一些</p>
<p>git remote add origin (远程仓库地址)</p>
<p>git clone （url）</p>
<p><img src="/2022/11/25/git/1669130942979.png" alt="1669130942979"></p>
<p>分支</p>
<p><img src="/2022/11/25/git/1669131590761.png" alt="1669131590761"></p>
<p><img src="/2022/11/25/git/1669131827194.png" alt="1669131827194"></p>
<p>多分支，便于分模块开发 ，最后在合并</p>
<p>分支合并产生冲突，手动解决</p>
<p><img src="/2022/11/25/git/1669133377771.png" alt="1669133377771"></p>
<p><img src="/2022/11/25/git/1669133461443.png" alt="1669133461443"></p>
<p>标签等于是照片；静态   分支是动态</p>
<h2 id="在IDEA中使用git"><a href="#在IDEA中使用git" class="headerlink" title="在IDEA中使用git"></a>在IDEA中使用git</h2><p>设置中配置一下git</p>
<p><img src="/2022/11/25/git/1669134341213.png" alt="1669134341213"></p>
<p><img src="/2022/11/25/git/1669134318845.png" alt="1669134318845"></p>
<p>从远程克隆</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到我的博客</title>
    <url>/2099/12/15/gonggao/</url>
    <content><![CDATA[<p>欢迎来到我的博客，此博客将记录日常遇到的问题以及笔记，布局尽力了，欢迎加微信交流。</p>
]]></content>
      <tags>
        <tag>公告</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVAWEB</title>
    <url>/2022/07/15/javaweb/</url>
    <content><![CDATA[<blockquote>
<h1 id="JAVAWeb"><a href="#JAVAWeb" class="headerlink" title="JAVAWeb"></a>JAVAWeb</h1></blockquote>
<p>[TOC]</p>
<h1 id="1、数据库（mysql）"><a href="#1、数据库（mysql）" class="headerlink" title="1、数据库（mysql）"></a>1、数据库（mysql）</h1><p>show databases；查询所有数据库</p>
<p>use xxx；使用某数据库</p>
<p>show tables； 查询所有表</p>
<p>desc func； 查询表整体结构信息</p>
<p>create table 表名（</p>
<p>字段名1 数据类型1，</p>
<p>字段名2 数据类型2，</p>
<p>…….</p>
<p>）</p>
<p><img src="/2022/07/15/javaweb/1655358873068.png" alt="1655358873068"></p>
<p><img src="/2022/07/15/javaweb/1655358980759.png" alt="1655358980759"></p>
<p><img src="/2022/07/15/javaweb/1655359067063.png" alt="1655359067063"></p>
<p><img src="/2022/07/15/javaweb/1655359088750.png" alt="1655359088750"></p>
<p>查询去除重复记录 </p>
<p>select distinct 字段列表 from 表名；</p>
<p>null值的比较不能使用&#x3D; ！&#x3D;。 需要使用 is is not</p>
<p><img src="/2022/07/15/javaweb/1655359264409.png" alt="1655359264409"></p>
<p>聚合函数：<img src="/2022/07/15/javaweb/1655359394011.png" alt="1655359394011">分组查询：<img src="/2022/07/15/javaweb/1655359638554.png" alt="1655359638554"></p>
<p>分页查询：</p>
<p><img src="/2022/07/15/javaweb/1655360004545.png" alt="1655360004545"></p>
<p>约束：<img src="/2022/07/15/javaweb/1655360233685.png" alt="1655360233685"></p>
<p>自增长　 auto increment</p>
<p><img src="/2022/07/15/javaweb/1655360442461.png" alt="1655360442461"></p>
<p><img src="/2022/07/15/javaweb/1655360545482.png" alt="1655360545482"></p>
<p>外键</p>
<p><img src="/2022/07/15/javaweb/1655360685648.png" alt="1655360685648"></p>
<p>多表查询：</p>
<p><img src="/2022/07/15/javaweb/1655362093841.png" alt="1655362093841"></p>
<p><img src="/2022/07/15/javaweb/1655362205236.png" alt="1655362205236"></p>
<p><img src="/2022/07/15/javaweb/1655362329350.png" alt="1655362329350"></p>
<p>事务：</p>
<p><img src="/2022/07/15/javaweb/1655362751677.png" alt="1655362751677"></p>
<p>查询事务的默认提交方式：select　＠＠autocommit；</p>
<h1 id="２、JDBC"><a href="#２、JDBC" class="headerlink" title="２、JDBC"></a>２、JDBC</h1><p><img src="/2022/07/15/javaweb/1655363613215.png" alt="1655363613215"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCdemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//MYSQL 5之后可以省略jar包里面有</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/db1?useSSL=false&quot;</span>;</span><br><span class="line">        String username=<span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password=<span class="string">&quot;1234&quot;</span>;</span><br><span class="line">       <span class="type">Connection</span>  <span class="variable">conn</span> <span class="operator">=</span>DriverManager.getConnection(url,username,password);</span><br><span class="line"></span><br><span class="line">       String sql=<span class="string">&quot;UPDATE cs set name=&#x27;李钊&#x27; where id=2&quot;</span>;</span><br><span class="line"></span><br><span class="line">       Statement stmt=conn.createStatement();</span><br><span class="line">       <span class="type">int</span> count=stmt.executeUpdate(sql);<span class="comment">//受影响的行数</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改成功~&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;修改失败~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//System.out.println(count);</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="API详解："><a href="#API详解：" class="headerlink" title="API详解："></a>API详解：</h2><p><img src="/2022/07/15/javaweb/1655363896136.png" alt="1655363896136">·</p>
<h3 id="1、DriverManager"><a href="#1、DriverManager" class="headerlink" title="1、DriverManager:"></a>1、DriverManager:</h3><p><img src="/2022/07/15/javaweb/1655364387165.png" alt="1655364387165"></p>
<p><img src="/2022/07/15/javaweb/1655364401202.png" alt="1655364401202"></p>
<h3 id="2、Connection"><a href="#2、Connection" class="headerlink" title="2、Connection:"></a>2、Connection:</h3><p><img src="/2022/07/15/javaweb/1655364546826.png" alt="1655364546826"></p>
<p><img src="/2022/07/15/javaweb/1655364573853.png" alt="1655364573853"></p>
<p><img src="/2022/07/15/javaweb/1655364585297.png" alt="1655364585297"></p>
<p>开启事务：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">           count1 = stmt.executeUpdate(sql1);</span><br><span class="line">           count2 = stmt.executeUpdate(sql2);</span><br><span class="line">           conn.commit();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           conn.rollback();</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>



<h3 id="3、Statement"><a href="#3、Statement" class="headerlink" title="3、Statement"></a>3、Statement</h3><p><img src="/2022/07/15/javaweb/1655365722409.png" alt="1655365722409"></p>
<h3 id="4、ResultSet"><a href="#4、ResultSet" class="headerlink" title="4、ResultSet"></a>4、ResultSet</h3><p><img src="/2022/07/15/javaweb/1655366106462.png" alt="1655366106462"></p>
<h3 id="5、PreparedStatement"><a href="#5、PreparedStatement" class="headerlink" title="5、PreparedStatement"></a>5、PreparedStatement</h3><p>此API防止sql注入</p>
<p><img src="/2022/07/15/javaweb/1655395861961.png" alt="1655395861961"></p>
<p>原理：</p>
<p>开启预编译 性能更高</p>
<p><img src="/2022/07/15/javaweb/1655396074775.png" alt="1655396074775"></p>
<h2 id="数据库连接池-Druid"><a href="#数据库连接池-Druid" class="headerlink" title="数据库连接池 Druid"></a>数据库连接池 Druid</h2><p>用一个容器管理连接对象</p>
<p><img src="/2022/07/15/javaweb/1655449686609.png" alt="1655449686609"></p>
<p><img src="/2022/07/15/javaweb/1655449763814.png" alt="1655449763814"></p>
<h1 id="3、Maven"><a href="#3、Maven" class="headerlink" title="3、Maven"></a>3、Maven</h1><p>Maven官网：<a href="http://maven.apache.org/">http://maven.apache.org/</a></p>
<p><img src="/2022/07/15/javaweb/1655451189445.png" alt="1655451189445"></p>
<p><img src="/2022/07/15/javaweb/1655451250551.png" alt="1655451250551"></p>
<p><img src="/2022/07/15/javaweb/1655451338409.png" alt="1655451338409"></p>
<p><img src="/2022/07/15/javaweb/1655452084878.png" alt="1655452084878"></p>
<p>配置阿里云私服：加快导包速度</p>
<p><img src="/2022/07/15/javaweb/1655452168166.png" alt="1655452168166"></p>
<p>Maven基本使用</p>
<p><img src="/2022/07/15/javaweb/1655453096845.png" alt="1655453096845"></p>
<p>Maven生命周期</p>
<p><img src="/2022/07/15/javaweb/1655453531458.png" alt="1655453531458"></p>
<p>Maven在IDEA中的配置</p>
<p><img src="/2022/07/15/javaweb/1655453775944.png" alt="1655453775944"></p>
<p>Maven坐标详解</p>
<p><img src="/2022/07/15/javaweb/1655453826176.png" alt="1655453826176"></p>
<p>Maven项目创建</p>
<p><img src="/2022/07/15/javaweb/1655454956771.png" alt="1655454956771"></p>
<p>Mavne项目导入</p>
<p><img src="/2022/07/15/javaweb/1655454993461.png" alt="1655454993461"></p>
<p>Maven插件：Maven Helper 可以断点调试</p>
<p>依赖范围<img src="/2022/07/15/javaweb/1655455685274.png" alt="1655455685274"></p>
<h1 id="4、MyBatis"><a href="#4、MyBatis" class="headerlink" title="4、MyBatis"></a>4、MyBatis</h1><h2 id="1、Mybatis快速入门"><a href="#1、Mybatis快速入门" class="headerlink" title="1、Mybatis快速入门"></a>1、Mybatis快速入门</h2><p>优秀的持久层框架 ，简化JDBC</p>
<p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<p><img src="/2022/07/15/javaweb/1655475982999.png" alt="1655475982999"></p>
<p>配置文件</p>
<p><img src="/2022/07/15/javaweb/1655520880165.png" alt="1655520880165"></p>
<p>pojo中创建和数据库表中数据类型对应的类</p>
<p>logback.xml：控制台字体颜色配置文件</p>
<p>mybatis-config.xml:核心配置文件 包含<strong>数据库连接</strong> 和<strong>sql映射文件</strong></p>
<p>UserMapper.xml：查询语句</p>
<p><img src="/2022/07/15/javaweb/1655521021574.png" alt="1655521021574"></p>
<h2 id="2、Mapper代理开发"><a href="#2、Mapper代理开发" class="headerlink" title="2、Mapper代理开发"></a>2、Mapper代理开发</h2><p>还是解决硬编码问题</p>
<p><img src="/2022/07/15/javaweb/1655521118161.png" alt="1655521118161"></p>
<p>注：在resources中创建和mapper接口同名的目录 用&#x2F;来替代.当分隔符；</p>
<p>​		可以使用包扫描方式加载sql映射文件</p>
<h2 id="3、Mybatis核心配置文件"><a href="#3、Mybatis核心配置文件" class="headerlink" title="3、Mybatis核心配置文件"></a>3、Mybatis核心配置文件</h2><p>1、environments:配置数据库连接环境信息，可以配置多个environment，通过default属性切换不同的environment</p>
<p>2、typeAliases：起别名  通过包扫描 可以简化</p>
<p><img src="/2022/07/15/javaweb/1655523885240.png" alt="1655523885240"></p>
<p><img src="/2022/07/15/javaweb/1655523872167.png" alt="1655523872167"></p>
<p><img src="/2022/07/15/javaweb/1655523833703.png" alt="1655523833703"></p>
<p>插件：</p>
<p><img src="/2022/07/15/javaweb/1655545007773.png" alt="1655545007773"></p>
<h2 id="4、配置文件完成增删改查"><a href="#4、配置文件完成增删改查" class="headerlink" title="4、配置文件完成增删改查"></a>4、配置文件完成增删改查</h2><p>解决数据库表的字段名称 和 实体类的属性名称不一样的方法</p>
<p><img src="/2022/07/15/javaweb/1655546555632.png" alt="1655546555632"></p>
<p><img src="/2022/07/15/javaweb/1655546815448.png" alt="1655546815448"></p>
<p>参数占位符：#{}     </p>
<p><img src="/2022/07/15/javaweb/1655547438623.png" alt="1655547438623"></p>
<p>特殊字符的处理： 1、转义字符： 2、CDATA区：</p>
<p><img src="/2022/07/15/javaweb/1655547513484.png" alt="1655547513484"></p>
<p><img src="/2022/07/15/javaweb/1655548889168.png" alt="1655548889168"></p>
<p>多条件动态sql需注意</p>
<p><img src="/2022/07/15/javaweb/1655554214428.png" alt="1655554214428"></p>
<p><img src="/2022/07/15/javaweb/1655555785158.png" alt="1655555785158"></p>
<p>单条件动态sql</p>
<p><img src="/2022/07/15/javaweb/1655554277165.png" alt="1655554277165"></p>
<p>添加操作： 手动提交事务  或者设置参数</p>
<p><img src="/2022/07/15/javaweb/1655625211574.png" alt="1655625211574"></p>
<p>添加操作 –主键返回</p>
<p><img src="/2022/07/15/javaweb/1655625334557.png" alt="1655625334557"></p>
<p>修改操作：动态修改使用<set>标签</set></p>
<p><img src="/2022/07/15/javaweb/1655626126852.png" alt="1655626126852"></p>
<p>批量删除 foreach标签<img src="/2022/07/15/javaweb/1655626546877.png" alt="1655626546877"></p>
<h2 id="5、Mybatis参数传递"><a href="#5、Mybatis参数传递" class="headerlink" title="5、Mybatis参数传递"></a>5、Mybatis参数传递</h2><p><img src="/2022/07/15/javaweb/1655627354442.png" alt="1655627354442"></p>
<h2 id="6、注解开发"><a href="#6、注解开发" class="headerlink" title="6、注解开发"></a>6、注解开发</h2><p><img src="/2022/07/15/javaweb/1655627496627.png" alt="1655627496627"></p>
<h1 id="5、前端三件套"><a href="#5、前端三件套" class="headerlink" title="5、前端三件套"></a>5、前端三件套</h1><h2 id="1、html"><a href="#1、html" class="headerlink" title="1、html"></a>1、html</h2><p><img src="/2022/07/15/javaweb/1655860070522.png" alt="1655860070522"></p>
<p><img src="/2022/07/15/javaweb/1655860545183.png" alt="1655860545183"></p>
<p><img src="/2022/07/15/javaweb/1655909232601.png" alt="1655909232601"></p>
<p>controls展示播放控件</p>
<p><img src="/2022/07/15/javaweb/1655910500609.png" alt="1655910500609"></p>
<p><img src="/2022/07/15/javaweb/1655910618800.png" alt="1655910618800"></p>
<p><img src="/2022/07/15/javaweb/1655983058469.png" alt="1655983058469"></p>
<p><img src="/2022/07/15/javaweb/1655983309255.png" alt="1655983309255"></p>
<p><img src="/2022/07/15/javaweb/1655983507888.png" alt="1655983507888"></p>
<p><img src="/2022/07/15/javaweb/1655983670893.png" alt="1655983670893"></p>
<p>label内容和输入框关联<img src="/2022/07/15/javaweb/1655985833370.png" alt="1655985833370"></p>
<h2 id="2、css"><a href="#2、css" class="headerlink" title="2、css"></a>2、css</h2><p><img src="/2022/07/15/javaweb/1655984916958.png" alt="1655984916958"></p>
<p><img src="/2022/07/15/javaweb/1655985014882.png" alt="1655985014882"></p>
<p><img src="/2022/07/15/javaweb/1655985085833.png" alt="1655985085833"></p>
<p>引入css需要加入rel 属性 中的stylesheet</p>
<p>css选择器<img src="/2022/07/15/javaweb/1655985210928.png" alt="1655985210928"></p>
<h2 id="3、javaScript"><a href="#3、javaScript" class="headerlink" title="3、javaScript"></a>3、javaScript</h2><p><img src="/2022/07/15/javaweb/1655985529437.png" alt="1655985529437"></p>
<p><img src="/2022/07/15/javaweb/1655985950776.png" alt="1655985950776"></p>
<p><img src="/2022/07/15/javaweb/1655986090839.png" alt="1655986090839"></p>
<p><img src="/2022/07/15/javaweb/1655986401646.png" alt="1655986401646"></p>
<p>javascript中的原始类型和引用类型</p>
<p><img src="/2022/07/15/javaweb/1656082568076.png" alt="1656082568076"></p>
<p>运算符：&#x3D;&#x3D; 和&#x3D;&#x3D;&#x3D;（全等于） &#x3D;&#x3D;会进行类型转换 &#x3D;&#x3D;&#x3D;不会进行类型转换	</p>
<p><img src="/2022/07/15/javaweb/1656082982845.png" alt="1656082982845"></p>
<p>流程控制语句和java一样</p>
<p><img src="/2022/07/15/javaweb/1656083288047.png" alt="1656083288047"></p>
<p><img src="/2022/07/15/javaweb/1656083735636.png" alt="1656083735636"></p>
<p>array数组</p>
<p>push() 添加方法  splice(i,j)从第i个开始 删除j个元素</p>
<p><img src="/2022/07/15/javaweb/1656085513756.png" alt="1656085513756"></p>
<p><img src="/2022/07/15/javaweb/1656212885297.png" alt="1656212885297"></p>
<p>trim去除字符串前后的空白字符</p>
<p>自定义对象</p>
<p><img src="/2022/07/15/javaweb/1656212961925.png" alt="1656212961925"></p>
<p>BOM：</p>
<p><img src="/2022/07/15/javaweb/1656213053226.png" alt="1656213053226"></p>
<p><img src="/2022/07/15/javaweb/1656213317145.png" alt="1656213317145"></p>
<p><img src="/2022/07/15/javaweb/1656213556253.png" alt="1656213556253"></p>
<p><img src="/2022/07/15/javaweb/1656213587448.png" alt="1656213587448"></p>
<p>Dom:<img src="/2022/07/15/javaweb/1656213885733.png" alt="1656213885733"></p>
<p><img src="/2022/07/15/javaweb/1656214402830.png" alt="1656214402830"></p>
<p><img src="/2022/07/15/javaweb/1656216434081.png" alt="1656216434081"></p>
<p><img src="/2022/07/15/javaweb/1656224083482.png" alt="1656224083482"></p>
<p>DOM事件 去 W3school查询</p>
<p>表单验证</p>
<p><img src="/2022/07/15/javaweb/1656225361329.png" alt="1656225361329"></p>
<p><img src="/2022/07/15/javaweb/1656226846953.png" alt="1656226846953"></p>
<h1 id="6、web核心"><a href="#6、web核心" class="headerlink" title="6、web核心"></a>6、web核心</h1><p>javaweb技术栈</p>
<p><img src="/2022/07/15/javaweb/1656514199988.png" alt="1656514199988"></p>
<h2 id="1、http-web–tomcat-servlet"><a href="#1、http-web–tomcat-servlet" class="headerlink" title="1、http web–tomcat  servlet"></a>1、http web–tomcat  servlet</h2><p>1、http概念：HyperText Transfer Protocol,超文本传输协议，规定了浏览器和服务器的传输规则</p>
<p><img src="/2022/07/15/javaweb/1656514788241.png" alt="1656514788241"></p>
<p><img src="/2022/07/15/javaweb/1656514976363.png" alt="1656514976363"></p>
<p><img src="/2022/07/15/javaweb/1656515410448.png" alt="1656515410448"></p>
<h2 id="2、web服务器-—-tomcat"><a href="#2、web服务器-—-tomcat" class="headerlink" title="2、web服务器 —-tomcat"></a>2、web服务器 —-tomcat</h2><p><img src="/2022/07/15/javaweb/1656937707003.png" alt="1656937707003"></p>
<p>tomcat官网：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p>
<p><img src="/2022/07/15/javaweb/1656937951597.png" alt="1656937951597"></p>
<p><img src="/2022/07/15/javaweb/1656938479611.png" alt="1656938479611"></p>
<p><img src="/2022/07/15/javaweb/1656938637543.png" alt="1656938637543"></p>
<p><img src="/2022/07/15/javaweb/1656939248299.png" alt="1656939248299"></p>
<p><img src="/2022/07/15/javaweb/1656939454231.png" alt="1656939454231"></p>
<p>创建maven项目：</p>
<p><img src="/2022/07/15/javaweb/1657031992808.png" alt="1657031992808"></p>
<img src="/2022/07/15/javaweb/1657031978900.png" alt="1657031978900" style="zoom:200%;">

<p><img src="/2022/07/15/javaweb/1656942518422.png" alt="1656942518422"></p>
<h2 id="3、servlet"><a href="#3、servlet" class="headerlink" title="3、servlet"></a>3、servlet</h2><p><img src="/2022/07/15/javaweb/1657122318535.png" alt="1657122318535"></p>
<p><img src="/2022/07/15/javaweb/1657123505996.png" alt="1657123505996"></p>
<p><img src="/2022/07/15/javaweb/1657206725298.png" alt="1657206725298"></p>
<p><img src="/2022/07/15/javaweb/1657207685351.png" alt="1657207685351"></p>
<p><img src="/2022/07/15/javaweb/1657207706487.png" alt="1657207706487"></p>
<p><img src="/2022/07/15/javaweb/1657208348592.png" alt="1657208348592"></p>
<p><img src="/2022/07/15/javaweb/1657445052265.png" alt="1657445052265"></p>
<p><img src="/2022/07/15/javaweb/1657445077232.png" alt="1657445077232"></p>
<p><img src="/2022/07/15/javaweb/1657445238382.png" alt="1657445238382"></p>
<p>老版本通过xml配置servlet 现在都是用注解</p>
<h2 id="4、request和response"><a href="#4、request和response" class="headerlink" title="4、request和response"></a>4、request和response</h2><p><img src="/2022/07/15/javaweb/1659944105384.png" alt="1659944105384"></p>
<p><img src="/2022/07/15/javaweb/1659944590059.png" alt="1659944590059"></p>
<p><img src="/2022/07/15/javaweb/1659947223421.png" alt="1659947223421"></p>
<p><img src="/2022/07/15/javaweb/1659950032404.png" alt="1659950032404"></p>
<p><img src="/2022/07/15/javaweb/1660029522429.png" alt="1660029522429"></p>
<p><img src="/2022/07/15/javaweb/1660032693689.png" alt="1660032693689"></p>
<p><img src="/2022/07/15/javaweb/1660032769554.png" alt="1660032769554"></p>
<p><img src="/2022/07/15/javaweb/1660102734779.png" alt="1660102734779"></p>
<p><img src="/2022/07/15/javaweb/1660103273258.png" alt="1660103273258"></p>
<p><img src="/2022/07/15/javaweb/1660103463754.png" alt="1660103463754"></p>
<p>动态获取虚拟目录</p>
<p><img src="/2022/07/15/javaweb/1660103736569.png" alt="1660103736569"></p>
<p><img src="/2022/07/15/javaweb/1660103942443.png" alt="1660103942443"></p>
<h1 id="7、jsp"><a href="#7、jsp" class="headerlink" title="7、jsp"></a>7、jsp</h1><p><img src="/2022/07/15/javaweb/1660204977639.png" alt="1660204977639"></p>
<p><img src="/2022/07/15/javaweb/1660289646791.png" alt="1660289646791"></p>
<p><img src="/2022/07/15/javaweb/1660289753431.png" alt="1660289753431"></p>
<p><img src="/2022/07/15/javaweb/1660290323444.png" alt="1660290323444"></p>
<p><img src="/2022/07/15/javaweb/1660290602374.png" alt="1660290602374"></p>
<p><img src="/2022/07/15/javaweb/1660290840836.png" alt="1660290840836"></p>
<p><img src="/2022/07/15/javaweb/1660291539452.png" alt="1660291539452"></p>
<p><img src="/2022/07/15/javaweb/1660291560644.png" alt="1660291560644"></p>
<h1 id="8、MVC开发模式"><a href="#8、MVC开发模式" class="headerlink" title="8、MVC开发模式"></a>8、MVC开发模式</h1><p><img src="/2022/07/15/javaweb/1660291683985.png" alt="1660291683985"></p>
<p><img src="/2022/07/15/javaweb/1660291843183.png" alt="1660291843183"></p>
<p><img src="/2022/07/15/javaweb/1660291882721.png" alt="1660291882721"></p>
<h1 id="9、会话跟踪技术"><a href="#9、会话跟踪技术" class="headerlink" title="9、会话跟踪技术"></a>9、会话跟踪技术</h1><p><img src="/2022/07/15/javaweb/1660555214751.png" alt="1660555214751"></p>
<p><img src="/2022/07/15/javaweb/1660555599037.png" alt="1660555599037"></p>
<p><img src="/2022/07/15/javaweb/1660555756463.png" alt="1660555756463"></p>
<p><img src="/2022/07/15/javaweb/1660556777632.png" alt="1660556777632"></p>
<p><img src="/2022/07/15/javaweb/1660556966244.png" alt="1660556966244"></p>
<p><img src="/2022/07/15/javaweb/1660559189317.png" alt="1660559189317"></p>
<p><img src="/2022/07/15/javaweb/1660559597392.png" alt="1660559597392"></p>
<p><img src="/2022/07/15/javaweb/1660559862553.png" alt="1660559862553"></p>
<h1 id="10、filter过滤器"><a href="#10、filter过滤器" class="headerlink" title="10、filter过滤器"></a>10、filter过滤器</h1><p><img src="/2022/07/15/javaweb/1660726835165.png" alt="1660726835165"></p>
<p><img src="/2022/07/15/javaweb/1660727325055.png" alt="1660727325055"></p>
<p>一般 放行前对resqust中修改  放行后对response中改</p>
<p><img src="/2022/07/15/javaweb/1660727480997.png" alt="1660727480997"></p>
<p><img src="/2022/07/15/javaweb/1660727680169.png" alt="1660727680169"></p>
<p><img src="/2022/07/15/javaweb/1660728380599.png" alt="1660728380599"></p>
<p>11、listener监听器</p>
<p><img src="/2022/07/15/javaweb/1660728936391.png" alt="1660728936391"></p>
<h1 id="12、AJAX"><a href="#12、AJAX" class="headerlink" title="12、AJAX"></a>12、AJAX</h1><p><img src="/2022/07/15/javaweb/1660729327098.png" alt="1660729327098"></p>
<p><img src="/2022/07/15/javaweb/1660729344925.png" alt="1660729344925"></p>
<p><img src="/2022/07/15/javaweb/1660729375409.png" alt="1660729375409"></p>
<p><img src="/2022/07/15/javaweb/1660731018264.png" alt="1660731018264"></p>
<p><img src="/2022/07/15/javaweb/1660731364050.png" alt="1660731364050"></p>
<p><img src="/2022/07/15/javaweb/1660731582386.png" alt="1660731582386"></p>
<p><img src="/2022/07/15/javaweb/1660731627474.png" alt="1660731627474"></p>
<h1 id="13、Vue"><a href="#13、Vue" class="headerlink" title="13、Vue"></a>13、Vue</h1><p><img src="/2022/07/15/javaweb/1660972291162.png" alt="1660972291162"></p>
<p><img src="/2022/07/15/javaweb/1660972563402.png" alt="1660972563402"></p>
<p><img src="/2022/07/15/javaweb/1660972703946.png" alt="1660972703946"></p>
<p><img src="/2022/07/15/javaweb/1660972727803.png" alt="1660972727803"></p>
<p><img src="/2022/07/15/javaweb/1660972821789.png" alt="1660972821789"></p>
<p><img src="/2022/07/15/javaweb/1660972959395.png" alt="1660972959395"></p>
<p><img src="/2022/07/15/javaweb/1660973730162.png" alt="1660973730162"></p>
<h1 id="14、Element"><a href="#14、Element" class="headerlink" title="14、Element"></a>14、Element</h1><p> <a href="https://element.eleme.cn/#/zh-CN">Element - 网站快速成型工具</a> </p>
<p><img src="/2022/07/15/javaweb/1660977332487.png" alt="1660977332487"></p>
<p><img src="/2022/07/15/javaweb/1660977890183.png" alt="1660977890183"></p>
<p><img src="/2022/07/15/javaweb/1660977898724.png" alt="1660977898724"></p>
<p><img src="/2022/07/15/javaweb/1660985789894.png" alt="1660985789894"></p>
]]></content>
      <categories>
        <category>JAVA后端</category>
      </categories>
      <tags>
        <tag>JAVA后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>linux</title>
    <url>/2022/11/25/linux/</url>
    <content><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p><img src="/2022/11/25/linux/1669193111029.png" alt="1669193111029"></p>
<p><img src="/2022/11/25/linux/1669193204819.png" alt="1669193204819"></p>
<p>设置网卡</p>
<p><img src="/2022/11/25/linux/1669209460056.png" alt="1669209460056"></p>
<p><img src="/2022/11/25/linux/1669209647513.png" alt="1669209647513"></p>
<p><img src="/2022/11/25/linux/1669210755036.png" alt="1669210755036"></p>
<p><img src="/2022/11/25/linux/1669210766728.png" alt="1669210766728"></p>
<h2 id="1、Linux常用命令"><a href="#1、Linux常用命令" class="headerlink" title="1、Linux常用命令"></a>1、Linux常用命令</h2><p><img src="/2022/11/25/linux/1669210955878.png" alt="1669210955878"></p>
<p><img src="/2022/11/25/linux/1669212050970.png" alt="1669212050970"></p>
<p><img src="/2022/11/25/linux/1669212795667.png" alt="1669212795667"></p>
<p><img src="/2022/11/25/linux/1669212825992.png" alt="1669212825992"></p>
<p><img src="/2022/11/25/linux/1669212905867.png" alt="1669212905867"></p>
<p><img src="/2022/11/25/linux/1669213154530.png" alt="1669213154530"></p>
<p><img src="/2022/11/25/linux/1669213210434.png" alt="1669213210434"></p>
<p>tail -f 文件   监控文件</p>
<p><img src="/2022/11/25/linux/1669213477949.png" alt="1669213477949"></p>
<p><img src="/2022/11/25/linux/1669213637358.png" alt="1669213637358"></p>
<p><img src="/2022/11/25/linux/1669213891549.png" alt="1669213891549"></p>
<p><img src="/2022/11/25/linux/1669215943384.png" alt="1669215943384"></p>
<p><img src="/2022/11/25/linux/1669216853665.png" alt="1669216853665"></p>
<p><img src="/2022/11/25/linux/1669217255279.png" alt="1669217255279"></p>
<h2 id="2、常用组合"><a href="#2、常用组合" class="headerlink" title="2、常用组合"></a>2、常用组合</h2><p><img src="/2022/11/25/linux/1669217883051.png" alt="1669217883051"></p>
<h2 id="3、文本编辑"><a href="#3、文本编辑" class="headerlink" title="3、文本编辑"></a>3、文本编辑</h2><p><img src="/2022/11/25/linux/1669217978571.png" alt="1669217978571"></p>
<p><img src="/2022/11/25/linux/1669218101161.png" alt="1669218101161"></p>
<h3 id="VIM三种模式："><a href="#VIM三种模式：" class="headerlink" title="VIM三种模式："></a>VIM三种模式：</h3><p><img src="/2022/11/25/linux/1669218134901.png" alt="1669218134901"></p>
<p><img src="/2022/11/25/linux/1669218190699.png" alt="1669218190699"></p>
<p><img src="/2022/11/25/linux/1669218208043.png" alt="1669218208043"></p>
<p>查找</p>
<p><img src="/2022/11/25/linux/1669218478584.png" alt="1669218478584"></p>
<p><img src="/2022/11/25/linux/1669218547935.png" alt="1669218547935"></p>
<p>gerp区分大小写</p>
<h2 id="4、软件安装"><a href="#4、软件安装" class="headerlink" title="4、软件安装"></a>4、软件安装</h2><p><img src="/2022/11/25/linux/1669264602523.png" alt="1669264602523"></p>
<h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><p><img src="/2022/11/25/linux/1669266284451.png" alt="1669266284451"></p>
<h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p><img src="/2022/11/25/linux/1669266602549.png" alt="1669266602549"></p>
<p><img src="/2022/11/25/linux/1669266641667.png" alt="1669266641667"></p>
<p>防火墙</p>
<p><img src="/2022/11/25/linux/1669266990854.png" alt="1669266990854"></p>
<p>firewall-cmd –zone&#x3D;public –add-port&#x3D;8080&#x2F;tcp –permanent</p>
<p>firewall-cmd –reload</p>
<p><img src="/2022/11/25/linux/1669267844661.png" alt="1669267844661"></p>
<p>建议前者，实在不行杀死进程</p>
<h3 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h3><p><img src="/2022/11/25/linux/1669297847497.png" alt="1669297847497"></p>
<p> rpm -e –nodeps mariadb-libs-5.5.60-1.el7_5.x86_64</p>
<p><img src="/2022/11/25/linux/1669298014104.png" alt="1669298014104"></p>
<p><img src="/2022/11/25/linux/1669298224977.png" alt="1669298224977"></p>
<p><img src="/2022/11/25/linux/1669298242901.png" alt="1669298242901"></p>
<p><img src="/2022/11/25/linux/1669299443640.png" alt="1669299443640"></p>
<p>临时密码在日志文件中，需要自己修改（uy.sCr-en4;p）</p>
<p><img src="/2022/11/25/linux/1669299456497.png" alt="1669299456497"><img src="/2022/11/25/linux/1669299684638.png" alt="1669299684638"></p>
<p><img src="/2022/11/25/linux/1669299948164.png" alt="1669299948164"></p>
<p>外部链接需要开启防火墙</p>
<p> firewall-cmd –zone&#x3D;public –add-port&#x3D;3306&#x2F;tcp –permanent</p>
<p>firewall-cmd –reload</p>
<h3 id="lrzsz"><a href="#lrzsz" class="headerlink" title="lrzsz"></a>lrzsz</h3><p>yum自动处理依赖关系</p>
<p><img src="/2022/11/25/linux/1669300138296.png" alt="1669300138296"></p>
<h2 id="5、项目部署"><a href="#5、项目部署" class="headerlink" title="5、项目部署"></a>5、项目部署</h2><h2 id="1、手工部署"><a href="#1、手工部署" class="headerlink" title="1、手工部署"></a>1、手工部署</h2><p><img src="/2022/11/25/linux/1669302279892.png" alt="1669302279892"></p>
<p><img src="/2022/11/25/linux/1669302293367.png" alt="1669302293367"></p>
<p><img src="/2022/11/25/linux/1669302412142.png" alt="1669302412142"></p>
<p><img src="/2022/11/25/linux/1669302983690.png" alt="1669302983690"></p>
<p>更改后台运行</p>
<p><img src="/2022/11/25/linux/1669303161096.png" alt="1669303161096"></p>
<p><img src="/2022/11/25/linux/1669303355846.png" alt="1669303355846"></p>
<p>此操作会在当前目录生成hello.log</p>
<p><img src="/2022/11/25/linux/1669303443696.png" alt="1669303443696"></p>
<h2 id="2、通过shell自动部署"><a href="#2、通过shell自动部署" class="headerlink" title="2、通过shell自动部署"></a>2、通过shell自动部署</h2><p><img src="/2022/11/25/linux/1669303530021.png" alt="1669303530021"></p>
<p><img src="/2022/11/25/linux/1669304228594.png" alt="1669304228594"></p>
<p><img src="/2022/11/25/linux/1669304284169.png" alt="1669304284169"></p>
<p><img src="/2022/11/25/linux/1669304400881.png" alt="1669304400881"></p>
<p><img src="/2022/11/25/linux/1669304786023.png" alt="1669304786023"></p>
<p><img src="/2022/11/25/linux/1669305144393.png" alt="1669305144393"></p>
<p> <img src="/2022/11/25/linux/1669305384577.png" alt="1669305384577"> </p>
<p><img src="/2022/11/25/linux/1669305582407.png" alt="1669305582407"></p>
<p><img src="/2022/11/25/linux/1669306358120.png" alt="1669306358120"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2022/11/28/nginx/</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="Nginx简介与安装"><a href="#Nginx简介与安装" class="headerlink" title="Nginx简介与安装"></a>Nginx简介与安装</h2><p><img src="/2022/11/28/nginx/1669555941507.png" alt="1669555941507"></p>
<p><img src="/2022/11/28/nginx/1669556038627.png" alt="1669556038627"></p>
<p><img src="/2022/11/28/nginx/1669556073259.png" alt="1669556073259"></p>
<p><img src="/2022/11/28/nginx/1669556799267.png" alt="1669556799267"></p>
<p>yum install tree 展示当前目录结构</p>
<h2 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h2><p><img src="/2022/11/28/nginx/1669557498505.png" alt="1669557498505"></p>
<p><img src="/2022/11/28/nginx/1669557558920.png" alt="1669557558920"></p>
<p>在sbin目录下</p>
<p><img src="/2022/11/28/nginx/1669557705402.png" alt="1669557705402"></p>
<p>也可以使用绝对路径</p>
<p><img src="/2022/11/28/nginx/1669558142053.png" alt="1669558142053"></p>
<p><img src="/2022/11/28/nginx/1669558204161.png" alt="1669558204161"></p>
<p>命令还是比较繁琐，配置一下环境变量即可简化开发</p>
<p>vim  &#x2F;etc&#x2F;profile  path中 加入 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin:</p>
<p>需要重新加载一下配置文件 source &#x2F;etc&#x2F;profile</p>
<h2 id="Nginx配置文件结构"><a href="#Nginx配置文件结构" class="headerlink" title="Nginx配置文件结构"></a>Nginx配置文件结构</h2><p><img src="/2022/11/28/nginx/1669558941716.png" alt="1669558941716"></p>
<h2 id="Nginx具体应用"><a href="#Nginx具体应用" class="headerlink" title="Nginx具体应用"></a>Nginx具体应用</h2><h3 id="1、部署静态资源"><a href="#1、部署静态资源" class="headerlink" title="1、部署静态资源"></a>1、部署静态资源</h3><p><img src="/2022/11/28/nginx/1669561065279.png" alt="1669561065279"></p>
<p>比tomcat高效  </p>
<p>：set nu 显示行号<img src="/2022/11/28/nginx/1669561434177.png" alt="1669561434177"></p>
<h3 id="2、反向代理"><a href="#2、反向代理" class="headerlink" title="2、反向代理"></a>2、反向代理</h3><p><img src="/2022/11/28/nginx/1669561471107.png" alt="1669561471107"></p>
<p><img src="/2022/11/28/nginx/1669561737110.png" alt=" "></p>
<p><strong>代理服务器</strong><br>代理服务器：一种部署于客户端与服务器之间的服务器，代替客户端与服务器对外部网络进行发送或接收消息。</p>
<p><strong>正向代理</strong><br>正向代理：在客户端部署代理服务器，代替客户端对外部网络发送和接收消息。客户端发送一个指定目标的请求给代理服务器，代理服务器再发送给目标服务器，目标服务器收到请求后，将响应的内容发送给代理服务器，代理服务器发给客户端。</p>
<p><img src="/2022/11/28/nginx/1669562339485.png" alt="1669562339485"></p>
<p>在正向代理的过程中，代理服务器代替客户端向目标服务器发送请求，目标服务器不知道谁是真正的客户端，不知道访问自己的是一个代理服务器还是客户端。服务器只负责将响应包发送给请求方。</p>
<p><strong>正向代理的用途</strong><br>1、突破访问控制<br>例如：VPN<br>国内用户不能直接访问国外的网站，需要通过代访问理服务器，代理服务器将我们的请求发送国外的目标服务器，目标服务器将请求的响应发送给代理服务器，代理服务器再发给用户。这样就实现了正向代理。<br>2、提高访问速度<br>代理服务器里有一个硬盘缓冲区，会将请求响应保存到缓冲区中。下次访问时会直接读取缓冲区中的数据返还给用户。<br>3、隐藏客户端真实的IP<br>因为访问目标服务器的是代理服务器，而不是用户，这样便能隐藏客户端的真实IP 。<br>例：暗网<br>在暗网里，我们访问一个目标时要通过几个代理服务器进行转发，目的就是为了防止被其他人查到自己真实的IP。</p>
<p>反向代理<br>反向代理：在服务器端部署代理服务器（为了区分，将真正响应的服务器成为业务服务器），让代理服务器替业务服务器接收请求或发送响应。客户端发送一个请求给代理服务器，代理服务器接收请求并将请求发送给业务服务器，业务服务器将响应发送给代理服务器，代理服务器再将响应发送给客户端。</p>
<p>在反向代理的过程中，客户端不知道自己请求的是代理服务器还是业务服务器。</p>
<p><img src="/2022/11/28/nginx/1669562354038.png" alt="1669562354038"></p>
<p><strong>反向代理用途：</strong><br>1、隐藏服务器真实IP<br>在服务器端配置代理服务器可以隐藏服务器的真实IP，防止恶意攻击者的攻击。<br>2、负载均衡<br>代理服务器可以将对业务服务器的请求根据预设算法分发到业务服务器上。<br>3、提高访问速度<br>对于静态页面的访问，代理服务器可以将数据存储到硬盘内，当出现有大量静态页面的访问时，可以直接从代理服务器获取响应。对于动态内容请求，代理服务器可以将缓存存在本地，提高访问响应速度。<br>4、提供安全障性<br>可以将代理服务器作为应用层的防火墙，拦截恶意的Web攻击。还可以为后端服务器统一提供加密和SSL加速（如SSL终端代理），提供HTTP访问认证等。</p>
<p><strong>正向代理和反向代理的异同点</strong><br>同：<br>1、正向代理和反向代理中的服务器都是对请求和响应进行转发。<br>2、都能提高访问速度。<br>3、帮助客户端或业务服务器隐藏真实的IP。<br>异：<br>1、部署的位置不同<br>正向代理部署在客户端，反向代理部署在服务器端。<br>2、作用不同<br>正向代理是客户端的代理，帮助客户端突破访问控制；反向代理是服务器的代理，帮助服务器实现负载均衡，安全防护。</p>
<p><strong>配置反向代理</strong></p>
<p><img src="/2022/11/28/nginx/1669562405369.png" alt="1669562405369"></p>
<h3 id="3、负载均衡"><a href="#3、负载均衡" class="headerlink" title="3、负载均衡"></a>3、负载均衡</h3><p>本质上就是反向代理</p>
<p><img src="/2022/11/28/nginx/1669562518808.png" alt="1669562518808"></p>
<p>配置负载均衡</p>
<p><img src="/2022/11/28/nginx/1669562626974.png" alt="1669562626974"></p>
<p><img src="/2022/11/28/nginx/1669562774947.png" alt="1669562774947"></p>
<p>权重（如下图，并不是严格的2：1，请求数量多的时候接近于2：1）</p>
<p><img src="/2022/11/28/nginx/1669562802568.png" alt="1669562802568"></p>
]]></content>
      <categories>
        <category>JAVA后端</category>
      </categories>
      <tags>
        <tag>JAVA后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/2023/03/28/mysql/</url>
    <content><![CDATA[<p>Mysql索引</p>
<h2 id="索引介绍"><a href="#索引介绍" class="headerlink" title="索引介绍"></a>索引介绍</h2><h3 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a><strong>索引是什么</strong></h3><p>官方介绍索引是帮助MySQL<strong>高效获取数据</strong>的<strong>数据结构</strong>。更通俗的说，数据库索引好比是一本书前面的目录，能<strong>加快数据库的查询速度</strong>。</p>
<p>一般来说索引本身也很大，不可能全部存储在内存中，因此<strong>索引往往是存储在磁盘上的文件中的</strong>（可能存储在单独的索引文件中，也可能和数据一起存储在数据文件中）。</p>
<p><strong>我们通常所说的索引，包括聚集索引、覆盖索引、组合索引、前缀索引、唯一索引等，没有特别说明，默认都是使用B+树结构组织（多路搜索树，并不一定是二叉的）的索引。</strong></p>
<h3 id="索引的优势和劣势"><a href="#索引的优势和劣势" class="headerlink" title="索引的优势和劣势"></a>索引的优势和劣势</h3><p><strong>优势：</strong></p>
<p><strong>可以提高数据检索的效率，降低数据库的IO成本</strong>，类似于书的目录。</p>
<p><strong>通过索引列对数据进行排序，降低数据排序的成本</strong>，降低了CPU的消耗。</p>
<p>被索引的列会自动进行排序，包括【单列索引】和【组合索引】，只是组合索引的排序要复杂一些。<br>如果按照索引列的顺序进行排序，对应order by语句来说，效率就会提高很多。<br><strong>劣势：</strong></p>
<p><strong>索引会占据磁盘空间</strong></p>
<p><strong>索引虽然会提高查询效率，但是会降低更新表的效率</strong>。比如每次对表进行增删改操作，MySQL不仅要保存数据，还有保存或者更新对应的索引文件。</p>
<h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><h3 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h3><p>索引列中的值必须是唯一的，不允许有空值。</p>
<h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><p>MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值。</p>
<h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><p>索引列中的值必须是唯一的，但是允许为空值。</p>
<h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><p>只能在文本类型CHAR,VARCHAR,TEXT类型字段上创建全文索引。字段长度比较大时，如果创建普通索引，在进行like模糊查询时效率比较低，这时可以创建全文索引。 MyISAM和InnoDB中都可以使用全文索引。</p>
<h3 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h3><p>MySQL在5.7之后的版本支持了空间索引，而且支持OpenGIS几何数据模型。MySQL在空间索引这方面遵循OpenGIS几何数据模型规则。</p>
<h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>在文本类型如CHAR,VARCHAR,TEXT类列上创建索引时，可以指定索引列的长度，但是数值类型不能指定。</p>
<h3 id="其他（按照索引列数量分类）"><a href="#其他（按照索引列数量分类）" class="headerlink" title="其他（按照索引列数量分类）"></a>其他（按照索引列数量分类）</h3><p><strong>单列索引</strong></p>
<p><strong>组合索引</strong></p>
<p>组合索引的使用，需要遵循最左前缀匹配原则（最左匹配原则）。一般情况下在条件允许的情况下使用组合索引替代多个单列索引使用。</p>
<h2 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h2><p>Hash表<br>Hash表，在Java中的HashMap，TreeMap就是Hash表结构，以键值对的方式存储数据。我们使用Hash表存储表数据Key可以存储索引列，Value可以存储行记录或者行磁盘地址。Hash表在等值查询时效率很高，时间复杂度为O(1)；但是不支持范围快速查找，范围查找时还是只能通过扫描全表方式。</p>
<p>显然这种并不适合作为经常需要查找和范围查找的数据库索引使用。</p>
<h3 id="Hash表"><a href="#Hash表" class="headerlink" title="Hash表"></a>Hash表</h3><p>Hash表，在Java中的HashMap，TreeMap就是Hash表结构，以键值对的方式存储数据。我们使用Hash表存储表数据Key可以存储索引列，Value可以存储行记录或者行磁盘地址。Hash表在等值查询时效率很高，时间复杂度为O(1)；但是不支持范围快速查找，范围查找时还是只能通过扫描全表方式。</p>
<h3 id="显然这种并不适合作为经常需要查找和范围查找的数据库索引使用。"><a href="#显然这种并不适合作为经常需要查找和范围查找的数据库索引使用。" class="headerlink" title="显然这种并不适合作为经常需要查找和范围查找的数据库索引使用。"></a>显然这种并不适合作为经常需要查找和范围查找的数据库索引使用。</h3><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p>二叉树，我想大家都会在心里有个图。</p>
<p><img src="/2023/03/28/mysql/1679920504486.png" alt="1679920504486"></p>
<p>二叉树特点：每个节点最多有2个分叉，左子树和右子树数据顺序左小右大。</p>
<p>这个特点就是为了保证每次查找都可以这折半而减少IO次数，但是二叉树就很考验第一个根节点的取值，因为很容易在这个特点下出现我们并发想发生的情况“树不分叉了”，这就很难受很不稳定。</p>
<p><img src="/2023/03/28/mysql/1679920520208.png" alt="1679920520208"></p>
<p><strong>显然这种情况不稳定的我们再选择设计上必然会避免这种情况的</strong></p>
<h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>平衡二叉树是采用二分法思维，平衡二叉查找树除了具备二叉树的特点，最主要的特征是树的左右两个子树的层级最多相差1。在插入删除数据时通过左旋&#x2F;右旋操作保持二叉树的平衡，不会出现左子树很高、右子树很矮的情况。</p>
<p>使用平衡二叉查找树查询的性能接近于二分查找法，时间复杂度是 O(log2n)。查询id&#x3D;6，只需要两次IO。</p>
<p><img src="/2023/03/28/mysql/1679920544985.png" alt="1679920544985"></p>
<p>就这个特点来看，可能各位会觉得这就很好，可以达到二叉树的理想的情况了。然而依然存在一些问题：</p>
<p>1、时间复杂度和树高相关。树有多高就需要检索多少次，每个节点的读取，都对应一次磁盘 IO 操作。树的高度就等于每次查询数据时磁盘 IO 操作的次数。磁盘每次寻道时间为10ms，在表数据量大时，查询性能就会很差。（1百万的数据量，log2n约等于20次磁盘IO，时间20*10&#x3D;0.2s）</p>
<p>2、平衡二叉树不支持范围查询快速查找，范围查询时需要从根节点多次遍历，查询效率不高。</p>
<h3 id="B树：改造二叉树"><a href="#B树：改造二叉树" class="headerlink" title="B树：改造二叉树"></a>B树：改造二叉树</h3><p>MySQL的数据是存储在磁盘文件中的，查询处理数据时，需要先把磁盘中的数据加载到内存中，磁盘IO 操作非常耗时，所以我们优化的重点就是尽量减少磁盘 IO 操作。访问二叉树的每个节点就会发生一次IO，如果想要减少磁盘IO操作，就需要尽量降低树的高度。那如何降低树的高度呢？</p>
<p>假如key为bigint&#x3D;8字节，每个节点有两个指针，每个指针为4个字节，一个节点占用的空间16个字节（8+4*2&#x3D;16）。</p>
<p>因为在MySQL的InnoDB存储引擎一次IO会读取的一页（默认一页16K）的数据量，而二叉树一次IO有效数据量只有16字节，空间利用率极低。为了最大化利用一次IO空间，一个简单的想法是在每个节点存储多个元素，在每个节点尽可能多的存储数据。每个节点可以存储1000个索引（16k&#x2F;16&#x3D;1000），这样就将二叉树改造成了多叉树，通过增加树的叉树，将树从高瘦变为矮胖。构建1百万条数据，树的高度只需要2层就可以（1000*1000&#x3D;1百万），也就是说只需要2次磁盘IO就可以查询到数据。磁盘IO次数变少了，查询数据的效率也就提高了。</p>
<p>这种数据结构我们称为B树，B树是一种多叉平衡查找树，如下图主要特点：</p>
<p>1、B树的节点中存储着多个元素，每个内节点有多个分叉。</p>
<p>2、节点中的元素包含键值和数据，节点中的键值从大到小排列。也就是说，在所有的节点都储存数据。</p>
<p>3、父节点当中的元素不会出现在子节点中。</p>
<p>4、所有的叶子结点都位于同一层，叶节点具有相同的深度，叶节点之间没有指针连接。</p>
<p><img src="/2023/03/28/mysql/1679920746690.png" alt="1679920746690"> 举个例子，在b树中查询数据的情况： </p>
<p>假如我们查询值等于10的数据。查询路径磁盘块1-&gt;磁盘块2-&gt;磁盘块5。</p>
<p>第一次磁盘IO：将磁盘块1加载到内存中，在内存中从头遍历比较，10&lt;15，走左路，到磁盘寻址磁盘块2。</p>
<p>第二次磁盘IO：将磁盘块2加载到内存中，在内存中从头遍历比较，7&lt;10，到磁盘中寻址定位到磁盘块5。</p>
<p>第三次磁盘IO：将磁盘块5加载到内存中，在内存中从头遍历比较，10&#x3D;10，找到10，取出data，如果data存储的行记录，取出data，查询结束。如果存储的是磁盘地址，还需要根据磁盘地址到磁盘中取出数据，查询终止。</p>
<p>相比二叉平衡查找树，在整个查找过程中，虽然数据的比较次数并没有明显减少，但是磁盘IO次数会大大减少。同时，由于我们的比较是在内存中进行的，比较的耗时可以忽略不计。B树的高度一般2至3层就能满足大部分的应用场景，所以使用B树构建索引可以很好的提升查询的效率。</p>
<p>过程如图：<br><img src="/2023/03/28/mysql/1679920928190.png" alt="1679920928190"></p>
<p>看到这里一定觉得B树就很理想了，但是前辈们会告诉你依然存在可以优化的地方：</p>
<p>1、B树不支持范围查询的快速查找，你想想这么一个情况如果我们想要查找10和35之间的数据，查找到15之后，需要回到根节点重新遍历查找，需要从根节点进行多次遍历，查询效率有待提高。</p>
<p>2、如果data存储的是行记录，行的大小随着列数的增多，所占空间会变大。这时，一个页中可存储的数据量就会变少，树相应就会变高，磁盘IO次数就会变大。</p>
<h3 id="B-树：改造B树"><a href="#B-树：改造B树" class="headerlink" title="B+树：改造B树"></a>B+树：改造B树</h3><p>B+树，作为B树的升级版，在B树基础上，MySQL在B树的基础上继续改造，使用B+树构建索引。B+树和B树最主要的区别在于<strong>非叶子节点是否存储数据</strong>的问题</p>
<ul>
<li><p>B树：非叶子节点和叶子节点都会存储数据。</p>
</li>
<li><p>B+树：只有叶子节点才会存储数据，非叶子节点至存储键值。叶子节点之间使用双向指针连接，最底层的叶子节点形成了一个双向有序链表。</p>
<p><img src="/2023/03/28/mysql/1679920968376.png" alt="1679920968376"></p>
</li>
</ul>
<p>B+树的最底层叶子节点包含了所有的索引项。从图上可以看到，B+树在查找数据的时候，由于数据都存放在最底层的叶子节点上，所以每次查找都需要检索到叶子节点才能查询到数据。所以在需要查询数据的情况下每次的磁盘的IO跟树高有直接的关系，但是从另一方面来说，由于数据都被放到了叶子节点，所以放索引的磁盘块锁存放的索引数量是会跟这增加的，所以相对于B树来说，B+树的树高理论上情况下是比B树要矮的。也存在索引覆盖查询的情况，在索引中数据满足了当前查询语句所需要的全部数据，此时只需要找到索引即可立刻返回，不需要检索到最底层的叶子节点。<br> <strong>举个例子：</strong> </p>
<p>等值查询：<br>假如我们查询值等于9的数据。查询路径磁盘块1-&gt;磁盘块2-&gt;磁盘块6。</p>
<p>1、第一次磁盘IO：将磁盘块1加载到内存中，在内存中从头遍历比较，9&lt;15，走左路，到磁盘寻址磁盘块2。</p>
<p>2、第二次磁盘IO：将磁盘块2加载到内存中，在内存中从头遍历比较，7&lt;9&lt;12，到磁盘中寻址定位到磁盘块6。</p>
<p>3、第三次磁盘IO：将磁盘块6加载到内存中，在内存中从头遍历比较，在第三个索引中找到9，取出data，如果data存储的行记录，取出data，查询结束。如果存储的是磁盘地址，还需要根据磁盘地址到磁盘中取出数据，查询终止。（这里需要区分的是在InnoDB中Data存储的为行数据，而MyIsam中存储的是磁盘地址。）</p>
<p>过程如图：</p>
<p><img src="/2023/03/28/mysql/1679921053692.png" alt="1679921053692"></p>
<p>范围查询：<br>假如我们想要查找9和26之间的数据。查找路径是磁盘块1-&gt;磁盘块2-&gt;磁盘块6-&gt;磁盘块7。</p>
<p>首先查找值等于9的数据，将值等于9的数据缓存到结果集。这一步和前面等值查询流程一样，发生了三次磁盘IO。</p>
<p>查找到15之后，底层的叶子节点是一个有序列表，我们从磁盘块6，键值9开始向后遍历筛选所有符合筛选条件的数据。</p>
<p>第四次磁盘IO：根据磁盘6后继指针到磁盘中寻址定位到磁盘块7，将磁盘7加载到内存中，在内存中从头遍历比较，9&lt;25&lt;26，9&lt;26&lt;&#x3D;26，将data缓存到结果集。</p>
<p>主键具备唯一性（后面不会有&lt;&#x3D;26的数据），不需再向后查找，查询终止。将结果集返回给用户。<br><img src="/2023/03/28/mysql/1679921067292.png" alt="1679921067292"></p>
<p> <strong>可以看到B+树可以保证等值和范围查询的快速查找，MySQL的索引就采用了B+树的数据结构。</strong> </p>
<h2 id="Mysql的索引实现"><a href="#Mysql的索引实现" class="headerlink" title="Mysql的索引实现"></a>Mysql的索引实现</h2><p> 介绍完了索引数据结构，那肯定是要带入到Mysql里面看看真实的使用场景的，所以这里分析Mysql的两种存储引擎的索引实现：<strong>MyISAM索引</strong>和<strong>InnoDB索引</strong> </p>
<h3 id="MyIsam索引"><a href="#MyIsam索引" class="headerlink" title="MyIsam索引"></a>MyIsam索引</h3><p>以一个简单的user表为例。user表存在两个索引，id列为主键索引，age列为普通索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `user`</span><br><span class="line">(</span><br><span class="line">  `id`       int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(20) DEFAULT NULL,</span><br><span class="line">  `age`      int(11)     DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE,</span><br><span class="line">  KEY `idx_age` (`age`) USING BTREE</span><br><span class="line">) ENGINE = MyISAM</span><br><span class="line">  AUTO_INCREMENT = 1</span><br><span class="line">  DEFAULT CHARSET = utf8;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/03/28/mysql/1679921128595.png" alt="1679921128595"></p>
<p> MyISAM的数据文件和索引文件是分开存储的。MyISAM使用B+树构建索引树时，叶子节点中存储的键值为索引列的值，数据为索引所在行的磁盘地址。 </p>
<h4 id="主键索引-1"><a href="#主键索引-1" class="headerlink" title="主键索引"></a>主键索引</h4><p> 每个InnoDB表都有一个聚簇索引 ，聚簇索引使用B+树构建，叶子节点存储的数据是整行记录。一般情况下，聚簇索引等同于主键索引，当一个表没有创建主键索引时，InnoDB会自动创建一个ROWID字段来构建聚簇索引。InnoDB创建索引的具体规则如下： </p>
<p>1、在表上定义主键PRIMARY KEY，InnoDB将主键索引用作聚簇索引。<br>2、如果表没有定义主键，InnoDB会选择第一个不为NULL的唯一索引列用作聚簇索引。<br>3、如果以上两个都没有，InnoDB 会使用一个6 字节长整型的隐式字段 ROWID字段构建聚簇索引。该ROWID字段会在插入新行时自动递增。</p>
<p>除聚簇索引之外的所有索引都称为辅助索引。在中InnoDB，辅助索引中的叶子节点存储的数据是该行的主键值都。 在检索时，InnoDB使用此主键值在聚簇索引中搜索行记录。</p>
<p>这里以user_innodb为例，user_innodb的id列为主键，age列为普通索引。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot</title>
    <url>/2022/10/30/springboot/</url>
    <content><![CDATA[<h1 id="Spring-boot"><a href="#Spring-boot" class="headerlink" title="Spring boot"></a>Spring boot</h1><h1 id="导读：课程前置知识"><a href="#导读：课程前置知识" class="headerlink" title="导读：课程前置知识"></a>导读：课程前置知识</h1><h2 id="1、基础篇"><a href="#1、基础篇" class="headerlink" title="1、基础篇"></a>1、基础篇</h2><p><img src="/2022/10/30/springboot/1666017794976.png" alt="1666017794976"></p>
<h2 id="2、实用篇"><a href="#2、实用篇" class="headerlink" title="2、实用篇"></a>2、实用篇</h2><p><img src="/2022/10/30/springboot/1666018103488.png" alt="1666018103488"></p>
<h2 id="3、原理篇"><a href="#3、原理篇" class="headerlink" title="3、原理篇"></a>3、原理篇</h2><p><img src="/2022/10/30/springboot/1666018111168.png" alt="1666018111168"></p>
<h2 id="4、REST风格"><a href="#4、REST风格" class="headerlink" title="4、REST风格"></a>4、REST风格</h2><p>简介：描述的是资源描述形式</p>
<p><img src="/2022/10/30/springboot/1666104369787.png" alt="1666104369787"></p>
<p><img src="/2022/10/30/springboot/1666104438401.png" alt="1666104438401"></p>
<p><img src="/2022/10/30/springboot/1666104781437.png" alt="1666104781437"></p>
<p><img src="/2022/10/30/springboot/1666104810037.png" alt="1666104810037"></p>
<p><img src="/2022/10/30/springboot/1666104852572.png" alt="1666104852572"></p>
<p><img src="/2022/10/30/springboot/1666104873066.png" alt="1666104873066"></p>
<p><img src="/2022/10/30/springboot/1666104909951.png" alt="1666104909951"></p>
<p><strong>@ResponseBody&#x3D;@Controller   + @ResponseBody</strong></p>
<p><img src="/2022/10/30/springboot/1666105171164.png" alt="1666105171164"></p>
<p><img src="/2022/10/30/springboot/1666105181650.png" alt="1666105181650"></p>
<h1 id="一、springboot基础篇"><a href="#一、springboot基础篇" class="headerlink" title="一、springboot基础篇"></a>一、springboot基础篇</h1><h2 id="1、创建springboot项目"><a href="#1、创建springboot项目" class="headerlink" title="1、创建springboot项目"></a>1、创建springboot项目</h2><p><img src="/2022/10/30/springboot/1666019489727.png" alt="1666019489727"></p>
<p><img src="/2022/10/30/springboot/1666019600669.png" alt="1666019600669"></p>
<p><img src="/2022/10/30/springboot/1666021098640.png" alt="1666021098640"></p>
<p><strong>开发springboot需要在联网环境下</strong></p>
<p><img src="/2022/10/30/springboot/1666021136190.png" alt="1666021136190"></p>
<p>通过官网创建springboot工程（因为idea创建需要访问外网，有时候连接不上，此方法可解决此问题）</p>
<p><img src="/2022/10/30/springboot/1666021593109.png" alt="1666021593109"></p>
<p>国内使用阿里云</p>
<p><a href="https://start.aliyun.com/">https://start.aliyun.com</a></p>
<p><img src="/2022/10/30/springboot/1666021775356.png" alt="1666021775356"></p>
<p>创建maven创建springboot工程</p>
<p><img src="/2022/10/30/springboot/1666101432894.png" alt="1666101432894"></p>
<p>文件隐藏的技巧</p>
<p><img src="/2022/10/30/springboot/1666101762821.png" alt="1666101762821"></p>
<h2 id="2、Springboot简介"><a href="#2、Springboot简介" class="headerlink" title="2、Springboot简介"></a>2、Springboot简介</h2><p><img src="/2022/10/30/springboot/1666101885698.png" alt="1666101885698"></p>
<h3 id="parent"><a href="#parent" class="headerlink" title="parent"></a>parent</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>对坐标版本进行<strong>管理</strong>，自动指定版本</p>
<p>阿里云直接选择继承</p>
<p><img src="/2022/10/30/springboot/1666102529630.png" alt="1666102529630"></p>
<p>ps：不同的parent版本不同，依赖管理的坐标版本也不同</p>
<p>小结：</p>
<p><img src="/2022/10/30/springboot/1666102645153.png" alt="1666102645153"></p>
<h3 id="Starter"><a href="#Starter" class="headerlink" title="Starter"></a>Starter</h3><p>包含了若干个pom定义的依赖管理文件（套中套）</p>
<p><img src="/2022/10/30/springboot/1666102998576.png" alt="1666102998576"></p>
<p>小结：</p>
<p><img src="/2022/10/30/springboot/1666103015368.png" alt="1666103015368"></p>
<h3 id="引导类"><a href="#引导类" class="headerlink" title="引导类"></a>引导类</h3><p>SpringBootApplication注解里面有若干个注解，用于加载bean等</p>
<p><img src="/2022/10/30/springboot/1666103321978.png" alt="1666103321978"></p>
<p><img src="/2022/10/30/springboot/1666103375488.png" alt="1666103375488"></p>
<h3 id="内嵌tomcat"><a href="#内嵌tomcat" class="headerlink" title="内嵌tomcat"></a>内嵌tomcat</h3><p>辅助功能 依赖替换</p>
<p><img src="/2022/10/30/springboot/1666103940078.png" alt="1666103940078"></p>
<p><img src="/2022/10/30/springboot/1666103992181.png" alt="1666103992181"></p>
<p>小结：<img src="/2022/10/30/springboot/1666104012501.png" alt="1666104012501"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p><img src="/2022/10/30/springboot/1666104069068.png" alt="1666104069068"></p>
<h2 id="3、基础配置"><a href="#3、基础配置" class="headerlink" title="3、基础配置"></a>3、基础配置</h2><p>复制工程</p>
<p><img src="/2022/10/30/springboot/1666144809255.png" alt="1666144809255"></p>
<p><img src="/2022/10/30/springboot/1666144755454.png" alt="1666144755454"></p>
<p>属性配置</p>
<p><img src="/2022/10/30/springboot/1666191423705.png" alt="1666191423705"></p>
<p><img src="/2022/10/30/springboot/1666191864266.png" alt="1666191864266"></p>
<p><img src="/2022/10/30/springboot/1666191992719.png" alt="1666191992719"></p>
<p>三种配置文件格式</p>
<p><img src="/2022/10/30/springboot/1666192122516.png" alt="1666192122516"></p>
<p><em><strong>推荐使用yml（主流）</strong></em></p>
<p><strong>优先级：properties&gt;yml&gt;yaml</strong> </p>
<p><img src="/2022/10/30/springboot/1666192368943.png" alt="1666192368943"></p>
<p><img src="/2022/10/30/springboot/1666192594645.png" alt="1666192594645"></p>
<p>yml和yaml的代码提示</p>
<p><img src="/2022/10/30/springboot/1666192607959.png" alt="1666192607959"></p>
<p>yaml格式</p>
<p><img src="/2022/10/30/springboot/1666192710585.png" alt="1666192710585"></p>
<p><img src="/2022/10/30/springboot/1666192997385.png" alt="1666192997385"></p>
<p>读取yml中数据</p>
<p>@value注解 配合 el表达式</p>
<p><img src="/2022/10/30/springboot/1666193349337.png" alt="1666193349337"></p>
<p>el表达式引用属性名</p>
<p><img src="/2022/10/30/springboot/1666193551478.png" alt="1666193551478"></p>
<p>使用environment对象封装全部配置信息 使用autowired（自动装配）</p>
<p><img src="/2022/10/30/springboot/1666193758692.png" alt="1666193758692"></p>
<p><strong>局部数据封装</strong>（最为常用的方法）</p>
<p><img src="/2022/10/30/springboot/1666194136375.png" alt="1666194136375"></p>
<p><img src="/2022/10/30/springboot/1666194194845.png" alt="1666194194845"></p>
<h2 id="4、lombok插件"><a href="#4、lombok插件" class="headerlink" title="4、lombok插件"></a>4、lombok插件</h2><p> <a href="https://blog.csdn.net/ThinkWon/article/details/101392808">(13条消息) Lombok简介、使用、工作原理、优缺点_ThinkWon的博客-CSDN博客_lombok</a> </p>
<p><img src="/2022/10/30/springboot/1666454504457.png" alt="1666454504457"></p>
<p><img src="/2022/10/30/springboot/1666454516975.png" alt="1666454516975"></p>
<h2 id="5、整合第三方配置"><a href="#5、整合第三方配置" class="headerlink" title="5、整合第三方配置"></a>5、整合第三方配置</h2><h3 id="整合Junit"><a href="#整合Junit" class="headerlink" title="整合Junit"></a><strong>整合Junit</strong></h3><p><img src="/2022/10/30/springboot/1666273151479.png" alt="1666273151479"></p>
<p><img src="/2022/10/30/springboot/1666273162907.png" alt="1666273162907"></p>
<p><img src="/2022/10/30/springboot/1666272828528.png" alt="1666272828528"></p>
<p><img src="/2022/10/30/springboot/1666273764592.png" alt="1666273764592"></p>
<p><img src="/2022/10/30/springboot/1666273781832.png" alt="1666273781832"></p>
<h3 id="整合mybatis"><a href="#整合mybatis" class="headerlink" title="整合mybatis"></a>整合mybatis</h3><p>导入相关maven坐标：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>    </span><br><span class="line">  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>设置数据源信息</p>
<p><img src="/2022/10/30/springboot/1666277348414.png" alt="1666277348414"></p>
<p><img src="/2022/10/30/springboot/1666277418864.png" alt="1666277418864"></p>
<p><img src="/2022/10/30/springboot/1666277445044.png" alt="1666277445044"></p>
<p><img src="/2022/10/30/springboot/1666277461611.png" alt="1666277461611"></p>
<p>常见错误（不同spring-boot-starter-parent 版本）mysql驱动不同</p>
<p>解决方法如下</p>
<p><img src="/2022/10/30/springboot/1666277065643.png" alt="1666277065643"></p>
<h3 id="整合mybatis-plus"><a href="#整合mybatis-plus" class="headerlink" title="整合mybatis-plus"></a>整合mybatis-plus</h3><p><img src="/2022/10/30/springboot/1666451955381.png" alt="1666451955381"></p>
<p><img src="/2022/10/30/springboot/1666451973023.png" alt="1666451973023"></p>
<p>会自动映射解决命名规则问题</p>
<p><img src="/2022/10/30/springboot/1666456253177.png" alt="1666456253177"></p>
<p>相关配置</p>
<p><img src="/2022/10/30/springboot/1666452018830.png" alt="1666452018830"></p>
<p>mp开启调试日志：</p>
<p><img src="/2022/10/30/springboot/1666498179234.png" alt="1666498179234"></p>
<p><img src="/2022/10/30/springboot/1666451998867.png" alt="1666451998867"></p>
<h3 id="整合Durid"><a href="#整合Durid" class="headerlink" title="整合Durid"></a>整合Durid</h3><p><img src="/2022/10/30/springboot/1666452850045.png" alt="1666452850045"></p>
<p><img src="/2022/10/30/springboot/1666452901311.png" alt="1666452901311"></p>
<p><img src="/2022/10/30/springboot/1666452882387.png" alt="1666452882387"></p>
<h2 id="6、整合ssm案例"><a href="#6、整合ssm案例" class="headerlink" title="6、整合ssm案例"></a>6、整合ssm案例</h2><p>分页功能的实现：</p>
<p><img src="/2022/10/30/springboot/1666499403491.png" alt="1666499403491"></p>
<p><img src="/2022/10/30/springboot/1666499411602.png" alt="1666499411602"></p>
<p><img src="/2022/10/30/springboot/1666499427854.png" alt="1666499427854"></p>
<p>条件查询</p>
<p><img src="/2022/10/30/springboot/1666499773512.png" alt="1666499773512"></p>
<p>分页查询</p>
<p><img src="/2022/10/30/springboot/1666499926340.png" alt="1666499926340"></p>
<p><img src="/2022/10/30/springboot/1666499976430.png" alt="1666499976430"></p>
<p><img src="/2022/10/30/springboot/1666499981805.png" alt="1666499981805"></p>
<h3 id="业务层开发"><a href="#业务层开发" class="headerlink" title="业务层开发"></a>业务层开发</h3><p><img src="/2022/10/30/springboot/1666501487386.png" alt="1666501487386"></p>
<p><img src="/2022/10/30/springboot/1666501495609.png" alt="1666501495609"> </p>
<p>测试业务层</p>
<p><img src="/2022/10/30/springboot/1666501520974.png" alt="1666501520974"></p>
<p><img src="/2022/10/30/springboot/1666501532573.png" alt="1666501532573"></p>
<h4 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a><strong>快速开发</strong></h4><p><img src="/2022/10/30/springboot/1666501587294.png" alt="1666501587294"></p>
<p><img src="/2022/10/30/springboot/1666502861928.png" alt="1666502861928"></p>
<p><img src="/2022/10/30/springboot/1666502872777.png" alt="1666502872777"></p>
<p><img src="/2022/10/30/springboot/1666502880383.png" alt="1666502880383"></p>
<h3 id="表现层开发"><a href="#表现层开发" class="headerlink" title="表现层开发"></a>表现层开发</h3><p><img src="/2022/10/30/springboot/1666541232791.png" alt="1666541232791"></p>
<p><img src="/2022/10/30/springboot/1666541819336.png" alt="1666541819336"></p>
<p>手动完成分页功能</p>
<p><img src="/2022/10/30/springboot/1666541845809.png" alt="1666541845809"></p>
<p><img src="/2022/10/30/springboot/1666541865627.png" alt="1666541865627"></p>
<p>基于restful<img src="/2022/10/30/springboot/1666541884212.png" alt="1666541884212"></p>
<h4 id="表现层消息一致处理："><a href="#表现层消息一致处理：" class="headerlink" title="表现层消息一致处理："></a>表现层消息一致处理：</h4><p><img src="/2022/10/30/springboot/1666586731504.png" alt="1666586731504"></p>
<p><img src="/2022/10/30/springboot/1666586748046.png" alt="1666586748046"></p>
<p><img src="/2022/10/30/springboot/1666586776480.png" alt="1666586776480"></p>
<h3 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h3><p><img src="/2022/10/30/springboot/1666588370979.png" alt="1666588370979"></p>
<p><img src="/2022/10/30/springboot/1666588388118.png" alt="1666588388118"></p>
<p><img src="/2022/10/30/springboot/1666600154363.png" alt="1666600154363"></p>
<p>添加功能</p>
<p><img src="/2022/10/30/springboot/1666604183532.png" alt="1666604183532"></p>
<p><img src="/2022/10/30/springboot/1666604189188.png" alt="1666604189188"></p>
<p><img src="/2022/10/30/springboot/1666604217941.png" alt="1666604217941"></p>
<p>删除功能</p>
<p>表格中绑定当前行数据</p>
<p><img src="/2022/10/30/springboot/1666604820480.png" alt="1666604820480"></p>
<p><img src="/2022/10/30/springboot/1666604778504.png" alt="1666604778504"></p>
<p>使用confirm提示框 防止误操作</p>
<p><img src="/2022/10/30/springboot/1666604841966.png" alt="1666604841966"></p>
<p><img src="/2022/10/30/springboot/1666604934067.png" alt="1666604934067"></p>
<p><img src="/2022/10/30/springboot/1666628521379.png" alt="1666628521379"></p>
<p><img src="/2022/10/30/springboot/1666628525556.png" alt="1666628525556"></p>
<p><img src="/2022/10/30/springboot/1666628666525.png" alt="1666628666525"></p>
<p><img src="/2022/10/30/springboot/1666628671125.png" alt="1666628671125"></p>
<p>和新增基本一样</p>
<p>异常处理</p>
<p><img src="/2022/10/30/springboot/1666665108101.png" alt="1666665108101"></p>
<p><img src="/2022/10/30/springboot/1666665125908.png" alt="1666665125908"></p>
<p><img src="/2022/10/30/springboot/1666665144844.png" alt="1666665144844"></p>
<p><img src="/2022/10/30/springboot/1666665239383.png" alt="1666665239383"></p>
<p>分页功能</p>
<p><img src="/2022/10/30/springboot/1666678314086.png" alt="1666678314086"></p>
<p><img src="/2022/10/30/springboot/1666678319509.png" alt="1666678319509"></p>
<p><img src="/2022/10/30/springboot/1666678329741.png" alt="1666678329741"></p>
<p><img src="/2022/10/30/springboot/1666678335742.png" alt="1666678335742"></p>
<p><img src="/2022/10/30/springboot/1666678342987.png" alt="1666678342987"></p>
<p><img src="/2022/10/30/springboot/1666678659920.png" alt="1666678659920"></p>
<p>查询功能</p>
<p><img src="/2022/10/30/springboot/1666712465826.png" alt="1666712465826"></p>
<p>双向绑定</p>
<p><img src="/2022/10/30/springboot/1666712479328.png" alt="1666712479328"></p>
<p>获取url</p>
<p><img src="/2022/10/30/springboot/1666712489704.png" alt="1666712489704"></p>
<p><img src="/2022/10/30/springboot/1666712519818.png" alt="1666712519818"></p>
<p>动态操作拼接</p>
<p><img src="/2022/10/30/springboot/1666712525972.png" alt="1666712525972"></p>
<h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><p><img src="/2022/10/30/springboot/1666712573054.png" alt="1666712573054"></p>
<p><img src="/2022/10/30/springboot/1666712617934.png" alt="1666712617934"></p>
<p>![1666712651406](Spring boot.assets&#x2F;1666712651406.png)</p>
]]></content>
      <categories>
        <category>JAVA后端</category>
      </categories>
      <tags>
        <tag>JAVA后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>springCache</title>
    <url>/2022/11/28/springCache/</url>
    <content><![CDATA[<h1 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h1><p><img src="/2022/11/28/springCache/1669471247516.png" alt="1669471247516"></p>
<p><img src="/2022/11/28/springCache/1669471263738.png" alt="1669471263738"></p>
<h1 id="mysql主从复制"><a href="#mysql主从复制" class="headerlink" title="mysql主从复制"></a>mysql主从复制</h1><h2 id="主库基本配置"><a href="#主库基本配置" class="headerlink" title="主库基本配置"></a>主库基本配置</h2><p><img src="/2022/11/28/springCache/1669524798636.png" alt="1669524798636"></p>
<p><img src="/2022/11/28/springCache/1669524773429.png" alt="1669524773429"></p>
<p><img src="/2022/11/28/springCache/1669524945025.png" alt="1669524945025"></p>
<p><img src="/2022/11/28/springCache/1669524954602.png" alt="1669524954602"><img src="/2022/11/28/springCache/1669525050425.png" alt="1669525050425"></p>
<h2 id="从库基本配置"><a href="#从库基本配置" class="headerlink" title="从库基本配置"></a>从库基本配置</h2><p><img src="/2022/11/28/springCache/1669525119981.png" alt="1669525119981"></p>
<p><img src="/2022/11/28/springCache/1669525241172.png" alt="1669525241172"></p>
<p><img src="/2022/11/28/springCache/1669525263313.png" alt="1669525263313"></p>
<p> change master to<br>master_host&#x3D;’192.168.199.100’,master_user&#x3D;’xiaoming’,master_password&#x3D;‘Root@123456’,                    master_log_file&#x3D;’mysql-bin.000001’,master_log_pos&#x3D;441;<br>start slave;</p>
<p><img src="/2022/11/28/springCache/1669525532981.png" alt="1669525532981"></p>
<p>show slave status\G;</p>
<h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p><img src="/2022/11/28/springCache/1669525976778.png" alt="1669525976778"></p>
<p><img src="/2022/11/28/springCache/1669526070068.png" alt="1669526070068"></p>
<p><img src="/2022/11/28/springCache/1669526967383.png" alt="1669526967383"></p>
<p><img src="/2022/11/28/springCache/1669526977339.png" alt="1669526977339"></p>
<p><img src="/2022/11/28/springCache/1669527006790.png" alt="1669527006790"></p>
<p>在spring配置文件下</p>
<p><img src="/2022/11/28/springCache/1669527301537.png" alt="1669527301537"></p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>如果从服务器是克隆的主服务器，那么server-<a href="https://so.csdn.net/so/search?q=uuid&spm=1001.2101.3001.7020">uuid</a>的值肯定是一样的，不然后面主从复制报错误1593，修改以后重启mysql</p>
<p><img src="/2022/11/28/springCache/1669525791997.png" alt="1669525791997"></p>
]]></content>
      <categories>
        <category>JAVA后端</category>
      </categories>
      <tags>
        <tag>JAVA后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud微服务导学</title>
    <url>/2023/03/05/springcloud/</url>
    <content><![CDATA[<h1 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h1><h2 id="技术栈导学"><a href="#技术栈导学" class="headerlink" title="技术栈导学"></a>技术栈导学</h2><p><img src="/2023/03/05/springcloud/1674646128621.png" alt="1674646128621"></p>
<p><img src="/2023/03/05/springcloud/1674646163345.png" alt="1674646163345"></p>
<p><img src="/2023/03/05/springcloud/1674646247483.png" alt="1674646247483"></p>
<p><img src="/2023/03/05/springcloud/1674646675483.png" alt="1674646675483"></p>
<p><img src="/2023/03/05/springcloud/1674646715115.png" alt="1674646715115"></p>
<h1 id="day1：微服务框架"><a href="#day1：微服务框架" class="headerlink" title="day1：微服务框架"></a>day1：微服务框架</h1><h3 id="1、认识微服务"><a href="#1、认识微服务" class="headerlink" title="1、认识微服务"></a>1、认识微服务</h3><p><img src="/2023/03/05/springcloud/1674647065197.png" alt="1674647065197"></p>
<p><img src="/2023/03/05/springcloud/1674647127921.png" alt="1674647127921"></p>
<p><img src="/2023/03/05/springcloud/1674647213559.png" alt="1674647213559"></p>
<p><img src="/2023/03/05/springcloud/1674647595782.png" alt="1674647595782"></p>
<p><img src="/2023/03/05/springcloud/1674647629763.png" alt="1674647629763"></p>
<p><strong>微服务是分布式架构的最佳实践方案！</strong></p>
<p><img src="/2023/03/05/springcloud/1674647784093.png" alt="1674647784093"></p>
<p><img src="/2023/03/05/springcloud/1674648371814.png" alt="1674648371814"></p>
<p><img src="/2023/03/05/springcloud/1674648481423.png" alt="1674648481423"></p>
<p>官网： <a href="https://spring.io/projects/spring-cloud">Spring Cloud</a> </p>
<p><img src="/2023/03/05/springcloud/1674648653059.png" alt="1674648653059"></p>
<p>版本需要兼容</p>
<p><img src="/2023/03/05/springcloud/1674648705038.png" alt="1674648705038"></p>
<h3 id="2、分布式服务框架案例"><a href="#2、分布式服务框架案例" class="headerlink" title="2、分布式服务框架案例"></a>2、分布式服务框架案例</h3><p><img src="/2023/03/05/springcloud/1674648858891.png" alt="1674648858891"></p>
<p><img src="/2023/03/05/springcloud/1674650522156.png" alt="1674650522156"></p>
<p><img src="/2023/03/05/springcloud/1674650498909.png" alt="1674650498909"></p>
<p>远程调用</p>
<p><img src="/2023/03/05/springcloud/1674650596896.png" alt="1674650596896"></p>
<p>如何在JAVA代码当中发http请求？</p>
<p><img src="/2023/03/05/springcloud/1674650664410.png" alt="1674650664410"></p>
<p>RestTemplate</p>
<p><img src="/2023/03/05/springcloud/1674651157529.png" alt="1674651157529"></p>
<p><img src="/2023/03/05/springcloud/1674651185508.png" alt="1674651185508"></p>
<p><img src="/2023/03/05/springcloud/1674651197585.png" alt="1674651197585"></p>
<p><img src="/2023/03/05/springcloud/1674651449094.png" alt="1674651449094"></p>
<p><img src="/2023/03/05/springcloud/1674651528732.png" alt="1674651528732"></p>
<h3 id="3、eureka注册中心"><a href="#3、eureka注册中心" class="headerlink" title="3、eureka注册中心"></a>3、eureka注册中心</h3><p><img src="/2023/03/05/springcloud/1674653408783.png" alt="1674653408783"></p>
<p><img src="/2023/03/05/springcloud/1674653763919.png" alt="1674653763919"></p>
<p><img src="/2023/03/05/springcloud/1674653840823.png" alt="1674653840823"></p>
<p><img src="/2023/03/05/springcloud/1674653854437.png" alt="1674653854437"></p>
<p>实践</p>
<p><img src="/2023/03/05/springcloud/1674653900723.png" alt="1674653900723"></p>
<p>服务端</p>
<p><img src="/2023/03/05/springcloud/1674655471952.png" alt="1674655471952"></p>
<p><img src="/2023/03/05/springcloud/1674655549170.png" alt="1674655549170"></p>
<p>客户端注册</p>
<p><img src="/2023/03/05/springcloud/1674656036060.png" alt="1674656036060"></p>
<p><img src="/2023/03/05/springcloud/1674656063187.png" alt="1674656063187"></p>
<p><img src="/2023/03/05/springcloud/1674656108274.png" alt="1674656108274"></p>
<p><img src="/2023/03/05/springcloud/1674657696039.png" alt="1674657696039"></p>
<p><img src="/2023/03/05/springcloud/1674658089577.png" alt="1674658089577"></p>
<h3 id="4、Ribbon负载均衡"><a href="#4、Ribbon负载均衡" class="headerlink" title="4、Ribbon负载均衡"></a>4、Ribbon负载均衡</h3><p>Ribbon拦截虚拟地址去eureka中拉取真实地址</p>
<p><img src="/2023/03/05/springcloud/1674732090282.png" alt="1674732090282"></p>
<p>具体工作流程</p>
<p><img src="/2023/03/05/springcloud/1674732462146.png" alt="1674732462146"></p>
<p>IRule决定了负载均衡的策略</p>
<p><img src="/2023/03/05/springcloud/1674732545061.png" alt="1674732545061"></p>
<p><img src="/2023/03/05/springcloud/1674732568714.png" alt="1674732568714"></p>
<p>修改负载均衡策略的方法</p>
<p>定义Bean的作用范围是全体，配置文件可对单个微服务进行配置</p>
<p><img src="/2023/03/05/springcloud/1674732754120.png" alt="1674732754120"></p>
<p>饥饿加载 </p>
<p><img src="/2023/03/05/springcloud/1674733053887.png" alt="1674733053887"></p>
<p><img src="/2023/03/05/springcloud/1674733121342.png" alt="1674733121342"></p>
<h3 id="5、nacos注册中心"><a href="#5、nacos注册中心" class="headerlink" title="5、nacos注册中心"></a>5、nacos注册中心</h3><p><img src="/2023/03/05/springcloud/1674735440258.png" alt="1674735440258"></p>
<p>首先下载启动nacos（此处省略）</p>
<p><img src="/2023/03/05/springcloud/1674735464106.png" alt="1674735464106"></p>
<p><img src="/2023/03/05/springcloud/1674735513968.png" alt="1674735513968"></p>
<p><img src="/2023/03/05/springcloud/1674735525063.png" alt="1674735525063"></p>
<p>分级存储模型</p>
<p><img src="/2023/03/05/springcloud/1674735609823.png" alt="1674735609823"></p>
<p><img src="/2023/03/05/springcloud/1674735673155.png" alt="1674735673155"></p>
<p>修改集群</p>
<p><img src="/2023/03/05/springcloud/1674735786974.png" alt="1674735786974"></p>
<p><img src="/2023/03/05/springcloud/1674735808774.png" alt="1674735808774"></p>
<p><img src="/2023/03/05/springcloud/1674735913936.png" alt="1674735913936"></p>
<p>修改负载均衡规则：优先访问本地集群</p>
<p><img src="/2023/03/05/springcloud/1674735937147.png" alt="1674735937147"></p>
<p><img src="/2023/03/05/springcloud/1674736129510.png" alt="1674736129510"></p>
<p>设置权重</p>
<p><img src="/2023/03/05/springcloud/1674746606190.png" alt="1674746606190"></p>
<p><img src="/2023/03/05/springcloud/1674746733970.png" alt="1674746733970"></p>
<p><img src="/2023/03/05/springcloud/1674746838838.png" alt="1674746838838"></p>
<p><img src="/2023/03/05/springcloud/1674746904223.png" alt="1674746904223"></p>
<p><img src="/2023/03/05/springcloud/1674746914394.png" alt="1674746914394"></p>
<p><img src="/2023/03/05/springcloud/1674746920289.png" alt="1674746920289"></p>
<p><img src="/2023/03/05/springcloud/1674747008101.png" alt="1674747008101"></p>
<p><img src="/2023/03/05/springcloud/1674747023506.png" alt="1674747023506"></p>
<p><img src="/2023/03/05/springcloud/1674747233985.png" alt="1674747233985"></p>
<p><img src="/2023/03/05/springcloud/1674747365325.png" alt="1674747365325"></p>
<p><img src="/2023/03/05/springcloud/1674747374055.png" alt="1674747374055"></p>
<h1 id="day2：微服务框架"><a href="#day2：微服务框架" class="headerlink" title="day2：微服务框架"></a>day2：微服务框架</h1><h3 id="1、Nacos配置管理"><a href="#1、Nacos配置管理" class="headerlink" title="1、Nacos配置管理"></a>1、Nacos配置管理</h3><p><img src="/2023/03/05/springcloud/1674747708816.png" alt="1674747708816"></p>
<p>配置创建</p>
<p><img src="/2023/03/05/springcloud/1674789029717.png" alt="1674789029717"></p>
<p><img src="/2023/03/05/springcloud/1674789039058.png" alt="1674789039058"></p>
<p>配置获取</p>
<p><img src="/2023/03/05/springcloud/1674789297367.png" alt="1674789297367"></p>
<p><img src="/2023/03/05/springcloud/1674789391868.png" alt="1674789391868"></p>
<p><img src="/2023/03/05/springcloud/1674789560798.png" alt="1674789560798"></p>
<p><img src="/2023/03/05/springcloud/1674789572346.png" alt="1674789572346"></p>
<p>配置热更新</p>
<p><img src="/2023/03/05/springcloud/1674790271344.png" alt="1674790271344"></p>
<p><img src="/2023/03/05/springcloud/1674790378260.png" alt="1674790378260"></p>
<p><img src="/2023/03/05/springcloud/1674790539484.png" alt="1674790539484"></p>
<p>多环境共享配置</p>
<p><img src="/2023/03/05/springcloud/1674792984966.png" alt="1674792984966"></p>
<p><img src="/2023/03/05/springcloud/1674793253191.png" alt="1674793253191"></p>
<p><img src="/2023/03/05/springcloud/1674793263487.png" alt="1674793263487"></p>
<p><strong>Nacos集群搭建</strong></p>
<p><img src="/2023/03/05/springcloud/1674796010888.png" alt="1674796010888"></p>
<p><img src="/2023/03/05/springcloud/1674796021398.png" alt="1674796021398"></p>
<h3 id="2、Feign远程调用"><a href="#2、Feign远程调用" class="headerlink" title="2、Feign远程调用"></a>2、Feign远程调用</h3><p>restTemplate存在的问题</p>
<p><img src="/2023/03/05/springcloud/1674796399064.png" alt="1674796399064"></p>
<p>Feign</p>
<p><img src="/2023/03/05/springcloud/1674796466884.png" alt="1674796466884"></p>
<p><img src="/2023/03/05/springcloud/1674796516480.png" alt="1674796516480"></p>
<p><img src="/2023/03/05/springcloud/1674796528951.png" alt="1674796528951"></p>
<p><img src="/2023/03/05/springcloud/1674796818528.png" alt="1674796818528"></p>
<p>Feign内部集成了ribbon</p>
<p><img src="/2023/03/05/springcloud/1674796825299.png" alt="1674796825299"></p>
<p><img src="/2023/03/05/springcloud/1674811397053.png" alt="1674811397053"></p>
<p><img src="/2023/03/05/springcloud/1674811439303.png" alt="1674811439303"></p>
<p><img src="/2023/03/05/springcloud/1674811500861.png" alt="1674811500861"></p>
<p><img src="/2023/03/05/springcloud/1674811732378.png" alt="1674811732378"></p>
<p><img src="/2023/03/05/springcloud/1674811830292.png" alt="1674811830292">	<img src="/2023/03/05/springcloud/1674811855453.png" alt="1674811855453"></p>
<p><img src="/2023/03/05/springcloud/1674811982782.png" alt="1674811982782"></p>
<p><strong>Feign的最佳实践方案</strong></p>
<p><img src="/2023/03/05/springcloud/1674812638099.png" alt="1674812638099"></p>
<p><img src="/2023/03/05/springcloud/1674812740244.png" alt="1674812740244"></p>
<p><img src="/2023/03/05/springcloud/1674812756343.png" alt="1674812756343"></p>
<p>抽取FeignClient</p>
<p><img src="/2023/03/05/springcloud/1674812803338.png" alt="1674812803338"></p>
<p>方法一：全部加载</p>
<p>方法二：精确拿</p>
<p><img src="/2023/03/05/springcloud/1674813214387.png" alt="1674813214387"></p>
<p><img src="/2023/03/05/springcloud/1674814328749.png" alt="1674814328749"></p>
<p><img src="/2023/03/05/springcloud/1674813313090.png" alt="1674813313090"></p>
<h3 id="3、Gateway服务网关"><a href="#3、Gateway服务网关" class="headerlink" title="3、Gateway服务网关"></a>3、Gateway服务网关</h3><p><img src="/2023/03/05/springcloud/1674814725075.png" alt="1674814725075"></p>
<p><img src="/2023/03/05/springcloud/1674814764772.png" alt="1674814764772"></p>
<p><img src="/2023/03/05/springcloud/1674814769109.png" alt="1674814769109"></p>
<p>搭建网关</p>
<p><img src="/2023/03/05/springcloud/1674879428846.png" alt="1674879428846"></p>
<p><img src="/2023/03/05/springcloud/1674879978586.png" alt="1674879978586"><img src="/2023/03/05/springcloud/1674880184440.png" alt="1674880184440"></p>
<p><img src="/2023/03/05/springcloud/1674880218206.png" alt="1674880218206"></p>
<p>路由</p>
<p><img src="/2023/03/05/springcloud/1674880826424.png" alt="1674880826424"></p>
<p>路由断言工厂</p>
<p><img src="/2023/03/05/springcloud/1674881026141.png" alt="1674881026141"></p>
<p><img src="/2023/03/05/springcloud/1674881089199.png" alt="1674881089199"></p>
<p><img src="/2023/03/05/springcloud/1674881200126.png" alt="1674881200126"></p>
<p>路由过滤器</p>
<p><img src="/2023/03/05/springcloud/1674881283073.png" alt="1674881283073"></p>
<p><img src="/2023/03/05/springcloud/1674881306762.png" alt="1674881306762"></p>
<p><img src="/2023/03/05/springcloud/1674881619421.png" alt="1674881619421"></p>
<p>默认过滤器</p>
<p><img src="/2023/03/05/springcloud/1674881652653.png" alt="1674881652653"></p>
<p><img src="/2023/03/05/springcloud/1674881725803.png" alt="1674881725803"></p>
<p>全局过滤器（自定义过滤器）</p>
<p><img src="/2023/03/05/springcloud/1674882107265.png" alt="1674882107265"></p>
<p>案例：</p>
<p><img src="/2023/03/05/springcloud/1674882137123.png" alt="1674882137123"></p>
<p><img src="/2023/03/05/springcloud/1674883002418.png" alt="1674883002418"></p>
<p><img src="/2023/03/05/springcloud/1674883013060.png" alt="1674883013060"></p>
<p>三种过滤器执行顺序</p>
<p><img src="/2023/03/05/springcloud/1674898892344.png" alt="1674898892344"></p>
<p><img src="/2023/03/05/springcloud/1674899614258.png" alt="1674899614258"></p>
<p><img src="/2023/03/05/springcloud/1674899634245.png" alt="1674899634245"></p>
<p>网关跨域问题：</p>
<p><img src="/2023/03/05/springcloud/1674900277731.png" alt="1674900277731"></p>
<p><img src="/2023/03/05/springcloud/1674900295458.png" alt="1674900295458"></p>
<p><img src="/2023/03/05/springcloud/1674900320319.png" alt="1674900320319"></p>
<h1 id="day3：Docker"><a href="#day3：Docker" class="headerlink" title="day3：Docker"></a>day3：Docker</h1><h3 id="1、Docker简介"><a href="#1、Docker简介" class="headerlink" title="1、Docker简介"></a>1、Docker简介</h3><p><img src="/2023/03/05/springcloud/1674901108700.png" alt="1674901108700"></p>
<p><img src="/2023/03/05/springcloud/1674901177657.png" alt="1674901177657"></p>
<p><img src="/2023/03/05/springcloud/1674901326711.png" alt="1674901326711"></p>
<p>不同的系统 函数库不同 不能直接迁移打包好的程序，而Docker直接打包系统的函数库然后直接操作内核</p>
<p><img src="/2023/03/05/springcloud/1674901406552.png" alt="1674901406552"></p>
<p><img src="/2023/03/05/springcloud/1674901521896.png" alt="1674901521896"></p>
<p><img src="/2023/03/05/springcloud/1674901550671.png" alt="1674901550671"></p>
<p><strong>Docker与虚拟机的差别</strong></p>
<p><img src="/2023/03/05/springcloud/1674901932840.png" alt="1674901932840"></p>
<p><img src="/2023/03/05/springcloud/1674901993880.png" alt="1674901993880"></p>
<p><img src="/2023/03/05/springcloud/1674902016426.png" alt="1674902016426"></p>
<p>镜像只允许读数据 </p>
<p><img src="/2023/03/05/springcloud/1674902171463.png" alt="1674902171463"></p>
<p>DockerHub 镜像托管平台</p>
<p><img src="/2023/03/05/springcloud/1674902346272.png" alt="1674902346272"></p>
<p><img src="/2023/03/05/springcloud/1674914267118.png" alt="1674914267118"><img src="/2023/03/05/springcloud/1674914330497.png" alt="1674914330497"></p>
<p>安装Docker</p>
<p><img src="/2023/03/05/springcloud/1674914684840.png" alt="1674914684840"></p>
<h3 id="2、Docker的基本操作"><a href="#2、Docker的基本操作" class="headerlink" title="2、Docker的基本操作"></a>2、Docker的基本操作</h3><p><img src="/2023/03/05/springcloud/1674915117908.png" alt="1674915117908"></p>
<p><img src="/2023/03/05/springcloud/1674915200775.png" alt="1674915200775"></p>
<p><img src="/2023/03/05/springcloud/1674915712162.png" alt="1674915712162"></p>
<p><img src="/2023/03/05/springcloud/1674915877240.png" alt="1674915877240"></p>
<p><img src="/2023/03/05/springcloud/1674917895363.png" alt="1674917895363"></p>
<p><img src="/2023/03/05/springcloud/1674918151264.png" alt="1674918151264"></p>
<p><img src="/2023/03/05/springcloud/1674918603094.png" alt="1674918603094"></p>
<p><img src="/2023/03/05/springcloud/1674968690781.png" alt="1674968690781"></p>
<p><img src="/2023/03/05/springcloud/1674968791665.png" alt="1674968791665"></p>
<p>数据卷 解决容器和数据耦合问题</p>
<p><img src="/2023/03/05/springcloud/1674969484047.png" alt="1674969484047"></p>
<p><img src="/2023/03/05/springcloud/1674969651453.png" alt="1674969651453"></p>
<p><img src="/2023/03/05/springcloud/1674969697722.png" alt="1674969697722"></p>
<p><img src="/2023/03/05/springcloud/1674969835838.png" alt="1674969835838"></p>
<p><img src="/2023/03/05/springcloud/1674969857964.png" alt="1674969857964"></p>
<p>挂载数据卷</p>
<p><img src="/2023/03/05/springcloud/1674970030341.png" alt="1674970030341"></p>
<p><img src="/2023/03/05/springcloud/1674972029127.png" alt="1674972029127"></p>
<p><img src="/2023/03/05/springcloud/1674972038767.png" alt="1674972038767"></p>
<p><img src="/2023/03/05/springcloud/1674972492891.png" alt="1674972492891"></p>
<p><img src="/2023/03/05/springcloud/1674973851798.png" alt="1674973851798"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line">--name mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=<span class="number">123</span> \</span><br><span class="line">-p <span class="number">3306</span>:<span class="number">3306</span> \</span><br><span class="line">-v /tmp/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf \</span><br><span class="line">-v /tmp/mysql/data:/<span class="keyword">var</span>/lib/mysql \</span><br><span class="line">-d \</span><br><span class="line">mysql:<span class="number">5.7</span><span class="number">.25</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/03/05/springcloud/1674973874774.png" alt="1674973874774"></p>
<h3 id="3、Dockerfile自定义镜像"><a href="#3、Dockerfile自定义镜像" class="headerlink" title="3、Dockerfile自定义镜像"></a>3、Dockerfile自定义镜像</h3><p>镜像结构</p>
<p><img src="/2023/03/05/springcloud/1675007201958.png" alt="1675007201958"></p>
<p><img src="/2023/03/05/springcloud/1675007327975.png" alt="1675007327975"></p>
<p><img src="/2023/03/05/springcloud/1675007356099.png" alt="1675007356099"></p>
<p>Dockerfile</p>
<p><img src="/2023/03/05/springcloud/1675007640881.png" alt="1675007640881"></p>
<p><img src="/2023/03/05/springcloud/1675007666139.png" alt="1675007666139"></p>
<p>java项目镜像在java：8-alpine的基础上  （此镜像已经完成了java基本配置）我们只需copy项目即可</p>
<p><img src="/2023/03/05/springcloud/1675008334295.png" alt="1675008334295"></p>
<p><img src="/2023/03/05/springcloud/1675008388701.png" alt="1675008388701"></p>
<h3 id="4、Docker-Compose"><a href="#4、Docker-Compose" class="headerlink" title="4、Docker-Compose"></a>4、Docker-Compose</h3><p><img src="/2023/03/05/springcloud/1675008611114.png" alt="1675008611114"></p>
<p>参考资料安装dockerCompose</p>
<p><img src="/2023/03/05/springcloud/1675008741438.png" alt="1675008741438"></p>
<p>集群部署</p>
<p><img src="/2023/03/05/springcloud/1675010411523.png" alt="1675010411523"></p>
<h3 id="5、Docker镜像服务"><a href="#5、Docker镜像服务" class="headerlink" title="5、Docker镜像服务"></a>5、Docker镜像服务</h3><p><img src="/2023/03/05/springcloud/1675010815592.png" alt="1675010815592"></p>
<p>根据资料完成配置</p>
<p><img src="/2023/03/05/springcloud/1675011026512.png"></p>
<p><img src="/2023/03/05/springcloud/1675011064346.png" alt="1675011064346"></p>
<h1 id="day4：服务异步通讯"><a href="#day4：服务异步通讯" class="headerlink" title="day4：服务异步通讯"></a>day4：服务异步通讯</h1><h3 id="1、MQ简介"><a href="#1、MQ简介" class="headerlink" title="1、MQ简介"></a>1、MQ简介</h3><p>同步通讯</p>
<p><img src="/2023/03/05/springcloud/1675066199971.png" alt="1675066199971"></p>
<p><img src="/2023/03/05/springcloud/1675066439414.png" alt="1675066439414"></p>
<p><img src="/2023/03/05/springcloud/1675066476663.png" alt="1675066476663"></p>
<p><img src="/2023/03/05/springcloud/1675066496237.png" alt="1675066496237"></p>
<p>异步通讯</p>
<p><img src="/2023/03/05/springcloud/1675066578461.png" alt="1675066578461"></p>
<p><img src="/2023/03/05/springcloud/1675066851531.png" alt="1675066851531"></p>
<p><img src="/2023/03/05/springcloud/1675066903029.png" alt="1675066903029"></p>
<h3 id="2、RabbitMQ快速入门"><a href="#2、RabbitMQ快速入门" class="headerlink" title="2、RabbitMQ快速入门"></a>2、RabbitMQ快速入门</h3><p><img src="/2023/03/05/springcloud/1675067240292.png" alt="1675067240292"></p>
<p><img src="/2023/03/05/springcloud/1675067687779.png" alt="1675067687779"></p>
<p><img src="/2023/03/05/springcloud/1675067710027.png" alt="1675067710027"></p>
<p><img src="/2023/03/05/springcloud/1675068076474.png" alt="1675068076474"></p>
<p>案例</p>
<p><img src="/2023/03/05/springcloud/1675068111106.png" alt="1675068111106"></p>
<p><img src="/2023/03/05/springcloud/1675068802676.png" alt="1675068802676"></p>
<p><img src="/2023/03/05/springcloud/1675068826629.png" alt="1675068826629"></p>
<h3 id="3、SpringAMQP"><a href="#3、SpringAMQP" class="headerlink" title="3、SpringAMQP"></a>3、SpringAMQP</h3><p><img src="/2023/03/05/springcloud/1675069002520.png" alt="1675069002520"></p>
<p><img src="/2023/03/05/springcloud/1675069017551.png" alt="1675069017551"></p>
<p>SpringAMQP基础使用</p>
<p>发送消息</p>
<p><img src="/2023/03/05/springcloud/1675070311279.png" alt="1675070311279"></p>
<p><img src="/2023/03/05/springcloud/1675070335867.png" alt="1675070335867"></p>
<p><img src="/2023/03/05/springcloud/1675070285618.png" alt="1675070285618"></p>
<p><img src="/2023/03/05/springcloud/1675070371142.png" alt="1675070371142"></p>
<p>监听消息</p>
<p><img src="/2023/03/05/springcloud/1675070400892.png" alt="1675070400892"></p>
<p><img src="/2023/03/05/springcloud/1675070728861.png" alt="1675070728861"></p>
<p>工作队列：</p>
<p><img src="/2023/03/05/springcloud/1675141895051.png" alt="1675141895051"></p>
<p><img src="/2023/03/05/springcloud/1675142208080.png" alt="1675142208080"></p>
<p><img src="/2023/03/05/springcloud/1675142215091.png" alt="1675142215091"></p>
<p><img src="/2023/03/05/springcloud/1675142220544.png" alt="1675142220544"></p>
<p>结果：消费者1 完成25条 消费者2完成25条     ———————消息预取</p>
<p><img src="/2023/03/05/springcloud/1675142236326.png" alt="1675142236326"></p>
<p><img src="/2023/03/05/springcloud/1675142227072.png" alt="1675142227072"></p>
<p><img src="/2023/03/05/springcloud/1675142862890.png" alt="1675142862890"></p>
<p><img src="/2023/03/05/springcloud/1675142856458.png" alt="1675142856458"></p>
<p><strong>发布订阅模型</strong></p>
<p><img src="/2023/03/05/springcloud/1675142990520.png" alt="1675142990520"></p>
<p>Fanout广播</p>
<p><img src="/2023/03/05/springcloud/1675143062658.png" alt="1675143062658"></p>
<p><img src="/2023/03/05/springcloud/1675143112209.png" alt="1675143112209"></p>
<p><img src="/2023/03/05/springcloud/1675143138497.png" alt="1675143138497"></p>
<p><img src="/2023/03/05/springcloud/1675143188370.png" alt="1675143188370"></p>
<p><img src="/2023/03/05/springcloud/1675173572189.png" alt="1675173572189"></p>
<p><img src="/2023/03/05/springcloud/1675173580069.png" alt="1675173580069"></p>
<p><img src="/2023/03/05/springcloud/1675173626265.png" alt="1675173626265"></p>
<p>路由 可实现广播 </p>
<p><img src="/2023/03/05/springcloud/1675174024182.png" alt="1675174024182"></p>
<p><img src="/2023/03/05/springcloud/1675174124225.png" alt="1675174124225"></p>
<p><img src="/2023/03/05/springcloud/1675174136068.png" alt="1675174136068"></p>
<p><img src="/2023/03/05/springcloud/1675174762830.png"></p>
<p><img src="/2023/03/05/springcloud/1675175491587.png" alt="1675175491587"></p>
<p><img src="/2023/03/05/springcloud/1675175517978.png" alt="1675175517978"></p>
<p><img src="/2023/03/05/springcloud/1675175659027.png" alt="1675175659027"></p>
<p><img src="/2023/03/05/springcloud/1675175679242.png" alt="1675175679242"></p>
<p>消息转换器</p>
<p><img src="/2023/03/05/springcloud/1675175913317.png" alt="1675175913317"></p>
<p><img src="/2023/03/05/springcloud/1675175925360.png" alt="1675175925360"></p>
<p><img src="/2023/03/05/springcloud/1675175945522.png" alt="1675175945522"></p>
<p>运行后结果</p>
<p><img src="/2023/03/05/springcloud/1675176016394.png" alt="1675176016394"></p>
<p>接收消息</p>
<p><img src="/2023/03/05/springcloud/1675176038763.png" alt="1675176038763"></p>
<p><img src="/2023/03/05/springcloud/1675176133731.png" alt="1675176133731"></p>
<h1 id="day5：分布式搜索"><a href="#day5：分布式搜索" class="headerlink" title="day5：分布式搜索"></a>day5：分布式搜索</h1><h3 id="1、elasticsearch"><a href="#1、elasticsearch" class="headerlink" title="1、elasticsearch"></a>1、elasticsearch</h3><p><img src="/2023/03/05/springcloud/1675226331605.png" alt="1675226331605"></p>
<p><img src="/2023/03/05/springcloud/1675226386136.png" alt="1675226386136"></p>
<p><img src="/2023/03/05/springcloud/1675226437684.png" alt="1675226437684"></p>
<p>Es的底层是Lucene</p>
<p><img src="/2023/03/05/springcloud/1675226512318.png" alt="1675226512318"></p>
<p><img src="/2023/03/05/springcloud/1675226632205.png" alt="1675226632205"></p>
<p>ES占比最高 开源</p>
<p><img src="/2023/03/05/springcloud/1675226714062.png" alt="1675226714062"></p>
<p>倒排索引</p>
<p>模糊搜索 会逐一比对数据库里面每条数据</p>
<p>正向索引</p>
<p><img src="/2023/03/05/springcloud/1675226874173.png" alt="1675226874173"></p>
<p>倒排索引    分词</p>
<p><img src="/2023/03/05/springcloud/1675227179285.png" alt="1675227179285"></p>
<p><img src="/2023/03/05/springcloud/1675227336319.png" alt="1675227336319"></p>
<p>文档 数据存储格式为json</p>
<p><img src="/2023/03/05/springcloud/1675227390364.png" alt="1675227390364"></p>
<p><img src="/2023/03/05/springcloud/1675227497083.png" alt="1675227497083"></p>
<p><img src="/2023/03/05/springcloud/1675227568690.png" alt="1675227568690"></p>
<p>mysql和es共存 优化性能</p>
<p><img src="/2023/03/05/springcloud/1675227683890.png" alt="1675227683890"></p>
<p><img src="/2023/03/05/springcloud/1675227706354.png" alt="1675227706354"></p>
<p>安装ES</p>
<p><img src="/2023/03/05/springcloud/1675227746103.png" alt="1675227746103"></p>
<p>es和kibana版本必须一致，kibana是可视化工具</p>
<p><strong>分词器</strong></p>
<p><img src="/2023/03/05/springcloud/1675228704561.png" alt="1675228704561"></p>
<p><img src="/2023/03/05/springcloud/1675229430755.png" alt="1675229430755"></p>
<p>对底层字典的拓展</p>
<p><img src="/2023/03/05/springcloud/1675229483416.png" alt="1675229483416"></p>
<p><img src="/2023/03/05/springcloud/1675229504737.png" alt="1675229504737"></p>
<p><img src="/2023/03/05/springcloud/1675229788381.png" alt="1675229788381"></p>
<h3 id="2、索引库操作"><a href="#2、索引库操作" class="headerlink" title="2、索引库操作"></a>2、索引库操作</h3><p><img src="/2023/03/05/springcloud/1675245272298.png" alt="1675245272298"></p>
<p><img src="/2023/03/05/springcloud/1675245302039.png" alt="1675245302039"></p>
<p><img src="/2023/03/05/springcloud/1675245378352.png" alt="1675245378352"></p>
<p><img src="/2023/03/05/springcloud/1675247294333.png" alt="1675247294333"></p>
<p>索引库只能在原来基础添加字段  不能修改</p>
<p><img src="/2023/03/05/springcloud/1675247451900.png" alt="1675247451900"></p>
<p><img src="/2023/03/05/springcloud/1675247599485.png" alt="1675247599485"></p>
<h3 id="3、文档操作"><a href="#3、文档操作" class="headerlink" title="3、文档操作"></a>3、文档操作</h3><p>文档相当于mysql中的数据</p>
<p><img src="/2023/03/05/springcloud/1675247839110.png" alt="1675247839110"></p>
<p><img src="/2023/03/05/springcloud/1675247861362.png" alt="1675247861362"></p>
<p>修改文档</p>
<p>全量修改 有id就修改  找不到id 等于新增</p>
<p><img src="/2023/03/05/springcloud/1675248249078.png" alt="1675248249078"></p>
<p><img src="/2023/03/05/springcloud/1675248343626.png" alt="1675248343626"></p>
<h3 id="4、RestClient操作索引库"><a href="#4、RestClient操作索引库" class="headerlink" title="4、RestClient操作索引库"></a>4、RestClient操作索引库</h3><p><img src="/2023/03/05/springcloud/1675265541384.png" alt="1675265541384"></p>
<p><img src="/2023/03/05/springcloud/1675265581110.png" alt="1675265581110"></p>
<p><img src="/2023/03/05/springcloud/1675265735902.png" alt="1675265735902"><img src="/2023/03/05/springcloud/1675266313709.png" alt="1675266313709"></p>
<p><img src="/2023/03/05/springcloud/1675266861143.png" alt="1675266861143"></p>
<p><img src="/2023/03/05/springcloud/1675267564039.png" alt="1675267564039"></p>
<p><img src="/2023/03/05/springcloud/1675267813162.png" alt="1675267813162"></p>
<p><img src="/2023/03/05/springcloud/1675268156458.png" alt="1675268156458"></p>
<h3 id="5、RestClient操作文档"><a href="#5、RestClient操作文档" class="headerlink" title="5、RestClient操作文档"></a>5、RestClient操作文档</h3><p><img src="/2023/03/05/springcloud/1675268829879.png" alt="1675268829879"></p>
<p><img src="/2023/03/05/springcloud/1675313647508.png" alt="1675313647508"></p>
<p><img src="/2023/03/05/springcloud/1675313805816.png" alt="1675313805816"></p>
<p><img src="/2023/03/05/springcloud/1675314127856.png" alt="1675314127856"></p>
<p><img src="/2023/03/05/springcloud/1675314401655.png" alt="1675314401655"></p>
<p><img src="/2023/03/05/springcloud/1675314446721.png" alt="1675314446721"></p>
<p><img src="/2023/03/05/springcloud/1675314566607.png" alt="1675314566607"></p>
<p>GET hotel&#x2F;_search  批量查询</p>
<p><img src="/2023/03/05/springcloud/1675315204807.png" alt="1675315204807"></p>
<h1 id="day6：分布式搜索引擎"><a href="#day6：分布式搜索引擎" class="headerlink" title="day6：分布式搜索引擎"></a>day6：分布式搜索引擎</h1><h3 id="1、DSL查询文档"><a href="#1、DSL查询文档" class="headerlink" title="1、DSL查询文档"></a>1、DSL查询文档</h3><p><img src="/2023/03/05/springcloud/1675315751417.png" alt="1675315751417"></p>
<p><img src="/2023/03/05/springcloud/1675315913466.png" alt="1675315913466"></p>
<p><img src="/2023/03/05/springcloud/1675315921620.png" alt="1675315921620"></p>
<p>全文检索查询</p>
<p><img src="/2023/03/05/springcloud/1675315972089.png" alt="1675315972089"></p>
<p><img src="/2023/03/05/springcloud/1675316877980.png" alt="1675316877980"></p>
<p>multi_match 查询字段越多性能越差， 推荐使用copy_to</p>
<p><img src="/2023/03/05/springcloud/1675316944802.png" alt="1675316944802"></p>
<p>精确查询</p>
<p><img src="/2023/03/05/springcloud/1675317072294.png" alt="1675317072294"></p>
<p><img src="/2023/03/05/springcloud/1675317998432.png" alt="1675317998432"></p>
<p><img src="/2023/03/05/springcloud/1675318012405.png" alt="1675318012405"></p>
<p><img src="/2023/03/05/springcloud/1675318243091.png" alt="1675318243091"></p>
<p>根据两个点</p>
<p><img src="/2023/03/05/springcloud/1675318325739.png" alt="1675318325739"></p>
<p>根据自己位置和半径</p>
<p><img src="/2023/03/05/springcloud/1675318486117.png" alt="1675318486117"></p>
<p>es会自动进行相关性打分 </p>
<p><img src="/2023/03/05/springcloud/1675319295970.png" alt="1675319295970"></p>
<p><img src="/2023/03/05/springcloud/1675319463682.png" alt="1675319463682"></p>
<p>BM25算法词频高的情况下不会出现分数很高的情况</p>
<p><img src="/2023/03/05/springcloud/1675319517240.png" alt="1675319517240"></p>
<p><img src="/2023/03/05/springcloud/1675319544895.png" alt="1675319544895"></p>
<p><strong>修改文档的相关性算分</strong></p>
<p><img src="/2023/03/05/springcloud/1675319805569.png" alt="1675319805569"></p>
<p><img src="/2023/03/05/springcloud/1675320302986.png" alt="1675320302986"></p>
<p><img src="/2023/03/05/springcloud/1675320590345.png" alt="1675320590345"></p>
<p><img src="/2023/03/05/springcloud/1675320859078.png" alt="1675320859078"></p>
<p><img src="/2023/03/05/springcloud/1675321633345.png" alt="1675321633345"></p>
<p><img src="/2023/03/05/springcloud/1675321660941.png" alt="1675321660941"></p>
<h3 id="2、搜索结果处理"><a href="#2、搜索结果处理" class="headerlink" title="2、搜索结果处理"></a>2、搜索结果处理</h3><p><strong>排序</strong> </p>
<p><img src="/2023/03/05/springcloud/1675352335945.png" alt="1675352335945"></p>
<p><img src="/2023/03/05/springcloud/1675352446136.png" alt="1675352446136"></p>
<p><img src="/2023/03/05/springcloud/1675352453963.png" alt="1675352453963"></p>
<p><a href="https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat/">https://lbs.amap.com/demo/jsapi-v2/example/map/click-to-get-lnglat/</a></p>
<p><img src="/2023/03/05/springcloud/1675352593468.png" alt="1675352593468"></p>
<p><img src="/2023/03/05/springcloud/1675352742974.png" alt="1675352742974"></p>
<p><strong>分页</strong></p>
<p><img src="/2023/03/05/springcloud/1675352932077.png" alt="1675352932077"></p>
<p>es最多只能查询出10000条数据 </p>
<p><img src="/2023/03/05/springcloud/1675353093692.png" alt="1675353093692"></p>
<p><img src="/2023/03/05/springcloud/1675353199228.png" alt="1675353199228"></p>
<p><img src="/2023/03/05/springcloud/1675353411480.png" alt="1675353411480"></p>
<p><strong>高亮</strong>  </p>
<p><img src="/2023/03/05/springcloud/1675354010140.png" alt="1675354010140"></p>
<p><img src="/2023/03/05/springcloud/1675354176149.png" alt="1675354176149"><img src="/2023/03/05/springcloud/1675354207134.png" alt="1675354207134"></p>
<h3 id="3、RestClient查询文档"><a href="#3、RestClient查询文档" class="headerlink" title="3、RestClient查询文档"></a>3、RestClient查询文档</h3><p><img src="/2023/03/05/springcloud/1675354308579.png" alt="1675354308579"></p>
<p><img src="/2023/03/05/springcloud/1675354477573.png" alt="1675354477573"></p>
<p><img src="/2023/03/05/springcloud/1675354926063.png" alt="1675354926063"></p>
<p><img src="/2023/03/05/springcloud/1675354933994.png" alt="1675354933994"></p>
<p><img src="/2023/03/05/springcloud/1675354957482.png" alt="1675354957482"></p>
<p>ctrl+alt+m 代码的抽取</p>
<p><img src="/2023/03/05/springcloud/1675355247180.png" alt="1675355247180"></p>
<p><img src="/2023/03/05/springcloud/1675355299690.png" alt="1675355299690"></p>
<p><img src="/2023/03/05/springcloud/1675355305149.png" alt="1675355305149"></p>
<p>boolean query</p>
<p><img src="/2023/03/05/springcloud/1675355459612.png" alt="1675355459612"></p>
<p><img src="/2023/03/05/springcloud/1675355495748.png" alt="1675355495748"></p>
<p><img src="/2023/03/05/springcloud/1675355557106.png" alt="1675355557106"></p>
<p><img src="/2023/03/05/springcloud/1675355724800.png" alt="1675355724800"></p>
<p>高亮结果的解析</p>
<p><img src="/2023/03/05/springcloud/1675355879132.png" alt="1675355879132"></p>
<p><img src="/2023/03/05/springcloud/1675356366947.png" alt="1675356366947"></p>
<h3 id="4、黑马旅游案例"><a href="#4、黑马旅游案例" class="headerlink" title="4、黑马旅游案例"></a>4、黑马旅游案例</h3><p><img src="/2023/03/05/springcloud/1675404022612.png" alt="1675404022612"></p>
<h1 id="day7：分布式搜索引擎"><a href="#day7：分布式搜索引擎" class="headerlink" title="day7：分布式搜索引擎"></a>day7：分布式搜索引擎</h1><h3 id="1、数据聚合"><a href="#1、数据聚合" class="headerlink" title="1、数据聚合"></a>1、数据聚合</h3><p>聚合的分类</p>
<p><img src="/2023/03/05/springcloud/1675489435017.png" alt="1675489435017"></p>
<p>聚合字段必须是 不分词的结构化的</p>
<p><img src="/2023/03/05/springcloud/1675489471677.png" alt="1675489471677"></p>
<p><img src="/2023/03/05/springcloud/1675489785305.png" alt="1675489785305"></p>
<p><img src="/2023/03/05/springcloud/1675489830023.png" alt="1675489830023"></p>
<p><img src="/2023/03/05/springcloud/1675490062148.png" alt="1675490062148"></p>
<p><img src="/2023/03/05/springcloud/1675490096681.png" alt="1675490096681"></p>
<p><img src="/2023/03/05/springcloud/1675490451741.png" alt="1675490451741"></p>
<p>RestClient中的实现</p>
<p><img src="/2023/03/05/springcloud/1675490527218.png" alt="1675490527218"></p>
<p>结果解析</p>
<p><img src="/2023/03/05/springcloud/1675490749574.png" alt="1675490749574"></p>
<p><img src="/2023/03/05/springcloud/1675491602323.png" alt="1675491602323"></p>
<h3 id="2、自动补全"><a href="#2、自动补全" class="headerlink" title="2、自动补全"></a>2、自动补全</h3><p>拼音分词器</p>
<p><img src="/2023/03/05/springcloud/1675494239549.png" alt="1675494239549"></p>
<p><img src="/2023/03/05/springcloud/1675494228554.png" alt="1675494228554"></p>
<p><img src="/2023/03/05/springcloud/1675494489696.png" alt="1675494489696"></p>
<p><img src="/2023/03/05/springcloud/1675494502082.png" alt="1675494502082"></p>
<p>拼音分词器存在问题功能不全故用如下方法解决</p>
<p><img src="/2023/03/05/springcloud/1675494619824.png" alt="1675494619824"></p>
<p><img src="/2023/03/05/springcloud/1675494860011.png" alt="1675494860011"></p>
<p><img src="/2023/03/05/springcloud/1675494920980.png" alt="1675494920980"></p>
<p><img src="/2023/03/05/springcloud/1675494959370.png" alt="1675494959370"></p>
<p><img src="/2023/03/05/springcloud/1675495231973.png" alt="1675495231973"></p>
<p><img src="/2023/03/05/springcloud/1675495712721.png" alt="1675495712721"></p>
<p><img src="/2023/03/05/springcloud/1675495878795.png" alt="1675495878795"></p>
<p><img src="/2023/03/05/springcloud/1675495889328.png" alt="1675495889328"></p>
<p><img src="/2023/03/05/springcloud/1675495942624.png" alt="1675495942624"></p>
<p><img src="/2023/03/05/springcloud/1675497110432.png" alt="1675497110432"></p>
<p>结果解析</p>
<p><img src="/2023/03/05/springcloud/1675497383939.png" alt="1675497383939"></p>
<p><img src="/2023/03/05/springcloud/1675497669316.png" alt="1675497669316"></p>
<h3 id="3、数据同步"><a href="#3、数据同步" class="headerlink" title="3、数据同步"></a>3、数据同步</h3><p><img src="/2023/03/05/springcloud/1675573980044.png" alt="1675573980044"></p>
<p>解决此问题的三种方案</p>
<p><img src="/2023/03/05/springcloud/1675574129802.png" alt="1675574129802"></p>
<p><img src="/2023/03/05/springcloud/1675574192691.png" alt="1675574192691"></p>
<p><img src="/2023/03/05/springcloud/1675574259654.png" alt="1675574259654"></p>
<p><img src="/2023/03/05/springcloud/1675574319353.png" alt="1675574319353"></p>
<p>演示第二种 MQ的异步通知</p>
<p><img src="/2023/03/05/springcloud/1675575318861.png" alt="1675575318861"></p>
<p><img src="/2023/03/05/springcloud/1675576535135.png" alt="1675576535135"></p>
<p><img src="/2023/03/05/springcloud/1675576544686.png" alt="1675576544686"></p>
<p>详细见代码</p>
<h3 id="4、集群"><a href="#4、集群" class="headerlink" title="4、集群"></a>4、集群</h3><p>ES集群</p>
<p><img src="/2023/03/05/springcloud/1675580094937.png" alt="1675580094937"></p>
<p><img src="/2023/03/05/springcloud/1675580421148.png" alt="1675580421148"></p>
<p><img src="/2023/03/05/springcloud/1675580430340.png" alt="1675580430340"></p>
<p><img src="/2023/03/05/springcloud/1675580511124.png" alt="1675580511124"></p>
<p><img src="/2023/03/05/springcloud/1675580681739.png" alt="1675580681739"></p>
<p>网络故障出现脑裂，出现了两个老大</p>
<p><img src="/2023/03/05/springcloud/1675580794202.png" alt="1675580794202"></p>
<p><img src="/2023/03/05/springcloud/1675580825536.png" alt="1675580825536"></p>
<p><img src="/2023/03/05/springcloud/1675581014397.png" alt="1675581014397"></p>
<p><img src="/2023/03/05/springcloud/1675581089045.png" alt="1675581089045"></p>
<p><img src="/2023/03/05/springcloud/1675581201588.png" alt="1675581201588"></p>
<p><img src="/2023/03/05/springcloud/1675581221840.png" alt="1675581221840"></p>
<p><img src="/2023/03/05/springcloud/1675581298634.png" alt="1675581298634"></p>
<p><img src="/2023/03/05/springcloud/1675581355409.png" alt="1675581355409"></p>
<p><img src="/2023/03/05/springcloud/1675581361099.png" alt="1675581361099"></p>
<p>重新启动01  情况如下：数据片迁移回去了 主节点变了</p>
<p><img src="/2023/03/05/springcloud/1675581410370.png" alt="1675581410370"></p>
<p>![1675581458070](Spring Cloud.assets&#x2F;1675581458070.png)</p>
]]></content>
      <categories>
        <category>JAVA后端</category>
      </categories>
      <tags>
        <tag>JAVA后端开发</tag>
      </tags>
  </entry>
  <entry>
    <title>使用redis缓存存在的问题</title>
    <url>/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="使用Redis缓存存在的问题"><a href="#使用Redis缓存存在的问题" class="headerlink" title="使用Redis缓存存在的问题"></a>使用Redis缓存存在的问题</h1><p>使用redis缓存的初衷：缓解数据库压力，提高性能。</p>
<h2 id="1、缓存穿透"><a href="#1、缓存穿透" class="headerlink" title="1、缓存穿透"></a>1、缓存穿透</h2><p><strong>缓存穿透</strong>是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</p>
<p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682306307979.png" alt="1682306307979"></p>
<h2 id="2、缓存雪崩"><a href="#2、缓存雪崩" class="headerlink" title="2、缓存雪崩"></a>2、缓存雪崩</h2><p><strong>缓存雪崩</strong>是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p>
<p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682306335639.png" alt="1682306335639"></p>
<h2 id="3、缓存击穿"><a href="#3、缓存击穿" class="headerlink" title="3、缓存击穿"></a>3、缓存击穿</h2><p><strong>缓存击穿</strong>问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p>
<p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682306408044.png" alt="1682306408044"></p>
<h1 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h1><h2 id="优惠券秒杀问题"><a href="#优惠券秒杀问题" class="headerlink" title="优惠券秒杀问题"></a>优惠券秒杀问题</h2><p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682306609880.png" alt="1682306609880"></p>
<p>超卖问题：多线程存在安全问题</p>
<p>如下图所示</p>
<p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682306653609.png" alt="1682306653609"></p>
<p>当线程1查询完库存大于0 还未扣减库存的时候，线程2也查询库存大于0 然后一起扣减 就会出现库存为负数的情况。</p>
<p><strong>超卖问题</strong>是典型的多线程安全问题，针对这一问题的常见解决方案就是<strong>加锁</strong>：</p>
<p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682306868656.png" alt="1682306868656"></p>
<ul>
<li><p><strong>悲观锁</strong>：添加同步锁，让线程串行执行<br>优点：简单粗暴<br>缺点：性能一般</p>
</li>
<li><p><strong>乐观锁</strong>：不加锁，在更新时判断是否有其它线程在修改<br>优点：性能好<br>缺点：存在成功率低的问题</p>
</li>
</ul>
<h2 id="一人一单问题"><a href="#一人一单问题" class="headerlink" title="一人一单问题"></a>一人一单问题</h2><p>需求：修改秒杀业务，要求同一个优惠券，一个用户只能下一单</p>
<p>流程图变更如下</p>
<p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682307111388.png" alt="1682307111388"></p>
<p>可通过加锁解决（单机情况）：</p>
<p>同一个用户一把锁 ，注意：userId.toString() 每次都会new出来，需要使用userId.toString().intern()，才能锁住。</p>
<p>在大多数情况下 都是集群部署 通过负载均衡</p>
<p>通过加锁可以解决在单机情况下的一人一单安全问题，但是在集群模式下就不行了。</p>
<p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682307714576.png" alt="1682307714576"></p>
<p>每个服务都会有单独的JVM,JVM中的锁监视器只能锁本JVM。导致两个服务没有被同一把锁锁住。</p>
<p><strong>解决方法</strong></p>
<p>分布式锁（经典加一层）<img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682307857331.png" alt="1682307857331"></p>
<p>分布式锁的核心是实现多进程之间互斥，而满足这一点的方式有很多，常见的有三种：</p>
<p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682307900348.png" alt="1682307900348"></p>
<p>这里将使用Redis进行分布式锁</p>
<p>Redis中SetNX命令 SETNX key value </p>
<p>将 key 的值设为 value ，当且仅当 key 不存在。<br>若给定的 key 已经存在，则 SETNX 不做任何动作。 </p>
<p><strong>故可以利用它来实现锁的效果</strong>。 </p>
<h3 id="误删锁问题"><a href="#误删锁问题" class="headerlink" title="误删锁问题"></a>误删锁问题</h3><p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682308507902.png" alt="1682308507902"></p>
<p>当线程1获取到锁之后，业务阻塞，造成锁的超时释放，此时线程2进来便可以拿到锁，然后线程1继续执行，就可以把线程2的锁删除掉。</p>
<p>原来业务流程：</p>
<p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682308828070.png" alt="1682308828070"></p>
<p>解决方法：在删除锁之前先看看锁是不是自己的。</p>
<p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682308802326.png" alt="1682308802326"></p>
<p>改进Redis的分布式锁</p>
<p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682308930271.png" alt="1682308930271"></p>
<p>但是上面误删问题仍可能在极端情况下发生；</p>
<p>例如：让线程1验证完是自己的锁的时候，被阻塞（垃圾回收机制），此时超时释放锁，然后线程2便进入了锁，线程1唤醒后，执行删除锁的业务，便也造成误删问题。</p>
<p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682309336207.png" alt="1682309336207"></p>
<p>解决方法：只需要保证 验证锁是否是自己的和删除锁是一个原子性的操作即可。</p>
<p>这里我们将使用Lua脚本。</p>
<p>Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。Lua是一种编程语言，它的基本语法大家可以参考网站：<a href="https://www.runoob.com/lua/lua-tutorial.html">https://www.runoob.com/lua/lua-tutorial.html</a></p>
<h3 id="一人一单问题总结"><a href="#一人一单问题总结" class="headerlink" title="一人一单问题总结"></a>一人一单问题总结</h3><ul>
<li><p><strong>基于Redis的分布式锁实现思路：</strong><br>利用set nx ex获取锁，并设置过期时间，保存线程标示<br>释放锁时先判断线程标示是否与自己一致，一致则删除锁</p>
</li>
<li><p><strong>特性：</strong><br>利用set nx满足互斥性<br>利用set ex保证故障时锁依然能释放，避免死锁，提高安全性<br>利用Redis集群保证高可用和高并发特性</p>
</li>
</ul>
<h2 id="基于setnx实现的分布式锁存在下面的问题："><a href="#基于setnx实现的分布式锁存在下面的问题：" class="headerlink" title="基于setnx实现的分布式锁存在下面的问题："></a>基于setnx实现的分布式锁存在下面的问题：</h2><p><img src="/2023/04/24/%E4%BD%BF%E7%94%A8redis%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98/1682309919934.png" alt="1682309919934"></p>
<h1 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h1><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。</p>
<ul>
<li>不可重入Redis分布式锁：<br>原理：利用setnx的互斥性；利用ex避免死锁；释放锁时判断线程标示<br>缺陷：不可重入、无法重试、锁超时失效</li>
<li>可重入的Redis分布式锁：<br>原理：利用hash结构，记录线程标示和重入次数；利用watchDog延续锁时间；利用信号量控制锁重试等待<br>缺陷：redis宕机引起锁失效问题</li>
<li>Redisson的multiLock：<br>原理：多个独立的Redis节点，必须在所有节点都获取重入锁，才算获取锁成功<br>缺陷：运维成本高、实现复杂</li>
</ul>
]]></content>
      <categories>
        <category>JAVA后端</category>
      </categories>
      <tags>
        <tag>JAVA后端开发</tag>
      </tags>
  </entry>
</search>
